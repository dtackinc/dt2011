/*..........................................................................
| USAGE
| shovel
| 
| END
 *..........................................................................*/

#include <tableau.h>
DT_RCSID("app/tableau $RCSfile: cam.c,v $ $Revision: 1.8 $");

#ifndef DTDEPEND						/* no makefile dependency 			*/
#  include <dsched.h>
#endif

/*..........................................................................
 *..........................................................................*/
static
time_t
cam_time(
  tableau_cam_t *cam)
{
  if (cam->autotime == 0)				/* want real time? 					*/
    return time(NULL);					/* give real time 					*/
  else									/* want fake time? 					*/
    return cam->autotime++;				/* auto advance one second 			*/
}

/*..........................................................................
 * load/reload single cam rules and make bitmap for this day only
 * create all structures as necessary
 *..........................................................................*/

static
dt_rc_e
tableau_cam_load(
  dtparam_t *param,
  tableau_cam_t *cam,
  int cam_index,
  int day)
{
  DT_F("tableau_cam_load");
  dt_ctl_t *ctl = &param->ctl;
  unsigned char *bitmap = cam->bitmap[cam_index];
  char id[32];
  char filename[128];
  int isreadable;
  dsched_t _dsched, *dsched = &_dsched;
  int have_dsched = 0;
  dt_rc_e rc = DT_RC_GOOD;

  dtstr_printf(ctl, id, sizeof(id), 
    "cam%02d", cam_index);

  DT_C(dsched_database,(param, id,		/* make database filename 			*/
    filename, sizeof(filename)));

  DT_C(dtos_isreadable,(ctl, filename,
    &isreadable));
  if (!isreadable)
  {
    goto cleanup;
  }

  if (bitmap == NULL)
    DT_C(dtos_malloc2,(ctl,				/* get space for day's bitmap 		*/
      (void **)&bitmap, 60*60*24,
      F, "bitmap"));
  
  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
    "loading %s for %s", id,
    dsched_days[day]);

  dsched_init(dsched, param, NULL);		/* init database 					*/
  have_dsched = 1;

  dsched_load(dsched, filename);		/* load database 					*/

  if (DSCHED_ISERROR(dsched))			/* check for loading errors 		*/
  {
	rc = dt_err(ctl, F,
      "dsched error: %s",
      dsched->error);
	goto cleanup;
  }

  dsched_bitmap(dsched, day, bitmap);	/* load bitmap 						*/
  if (DSCHED_ISERROR(dsched))
  {
	rc = dt_err(ctl, F,
      "bitmap error: %s",
      dsched->error);
	goto cleanup;
  }

  cam->bitmap[cam_index] = bitmap;		/* remember bitmap 					*/
  cam->next_access[cam_index] = 0;
  cam->last_access[cam_index] = 0;

cleanup:
  if (rc != DT_RC_GOOD)
  {
	if (bitmap != NULL)
	{
	  DT_I(dtos_free2,(ctl, bitmap,
        F, "bitmap"));
	  cam->bitmap[cam_index] = NULL;
	}

	if (have_dsched)
   	  dsched_uninit(dsched);
  }
  return rc;
}

/*..........................................................................
 * release all cam structures and bitmaps
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
tableau_cam_release(
  dtparam_t *param,
  tableau_cam_t *cam)
{
  DT_F("tableau_cam_release");
  dt_ctl_t *ctl = &param->ctl;
  int i;
  dt_rc_e rc = DT_RC_GOOD;

  for (i=0; i<TABLEAU_CAM_MAX; i++)		/* for each possible camera */
  {
	unsigned char *bitmap = cam->bitmap[i];
	if (bitmap != NULL)
	{
	  DT_I(dtos_free2,(ctl, bitmap,
        F, "bitmap"));
	  cam->bitmap[i] = NULL;
	}
  }

  return rc;
}
/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
tableau_cam_init(
  dtparam_t *param,
  tableau_cam_t *cam)
{
  DT_F("tableau_cam_init");
  dt_ctl_t *ctl = &param->ctl;
  time_t clock;
  struct tm *t;
  int day;
  int i;
  dt_rc_e rc = DT_RC_GOOD;

  if (param->config == NULL)
  {
	rc = dt_err(ctl, F,
      "no config directory given"
      " (need -config)");
	goto cleanup;
  }

  memset(cam, 0, sizeof(*cam));			/* clear out the structure 			*/

  clock = cam_time(cam);				/* current time 					*/
  t = localtime(&clock);				/* format into fields 				*/
  day = t->tm_wday;						/* this day 						*/

  for (i=0; i<TABLEAU_CAM_MAX; i++)		/* for each possible camera 		*/
	DT_C(tableau_cam_load,(param,		/* load information for this day 	*/
      cam, i, day));

  cam->day = day;						/* remember which day 				*/
  
  cam->initialized = 1;

cleanup:
  if (rc != DT_RC_GOOD)
  {
	DT_I(tableau_cam_release,(param,	/* release what we have so far 		*/
      cam));
	memset(cam, 0, sizeof(*cam));		/* clear out the structure 			*/
  }

  return rc;
}

/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
tableau_cam_uninit(
  dtparam_t *param,
  tableau_cam_t *cam)
{
  DT_F("tableau_cam_uninit");
  dt_ctl_t *ctl = &param->ctl;
  DT_Q(tableau_cam_release,(param, cam));
  memset(cam, 0, sizeof(*cam));			/* clear out the structure 			*/
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
tableau_cam_next(
  dtparam_t *param,
  tableau_cam_t *cam,
  int *cam_index)
{
  DT_F("tableau_cam_next");
  dt_ctl_t *ctl = &param->ctl;
  time_t clock, midnight, now;
  struct tm *t, q;
  int day;
  int i, j, k;
  long delay;
  dt_rc_e rc = DT_RC_GOOD;

again:
  clock = cam_time(cam);				/* current time 					*/
  t = localtime(&clock);				/* format into fields 				*/
  day = cam->autotime? cam->autoday%7:	/* day of the week 0=Sunday 		*/
    t->tm_wday;
  q = *t;
  q.tm_sec = q.tm_min = q.tm_hour = 0;	/* time at midnight					*/
  q.tm_wday = day;						/* possibly fake day 				*/
  midnight = mktime(&q);				/* seconds at midnight 				*/
  if (midnight == -1)
  {
	rc = dt_err(ctl, F,
      "mktime failed");
	goto cleanup;
  }
  now = clock - midnight;				/* seconds since midnight 			*/

  if (day != cam->day)					/* day has changed? 				*/
  {
    for (i=0; i<TABLEAU_CAM_MAX; i++)
	  DT_C(tableau_cam_load,(param,		/* load information for this day 	*/
        cam, i, day));
    cam->day = day;
  }

#define BIT(BITMAP, I) ((BITMAP)[(I)>>3] & (0x80>>((I)&7)))

  for (i=0; i<TABLEAU_CAM_MAX; i++)		/* scan list of cameras 			*/
  {
	j = (cam->last_index+i+1) %			/* round-robin fashion 				*/
      TABLEAU_CAM_MAX;
	if (cam->bitmap[j] != NULL)			/* camera is active? 				*/
	{
	  for (k=cam->last_access[j];		/* check for bits on 				*/
		   k<=now; 
		   k++)
	    if (BIT(cam->bitmap[j], k))
          break;
	  if (k <= now)						/* some bit was on? 				*/
        break;
	}
  }

  if (i < TABLEAU_CAM_MAX)				/* someone needs attention? 		*/
  {
	cam->last_index = cam->current_index;
	*cam_index = cam->current_index = j;
	cam->last_access[j] = now;
	cam->day = day;						/* remember which day 				*/
    goto cleanup;
  }

  delay = 60*60*24;
  for (i=0; i<TABLEAU_CAM_MAX; i++)		/* scan list of cameras 			*/
  if (cam->bitmap[i] != NULL)			/* camera is active? 				*/
  {
	if (cam->next_access[i] < now)		/* future is unknown? 				*/
	{
  	  for (k=now; k<60*60*24; k++)
	    if (BIT(cam->bitmap[i], k))
          break;
	  cam->next_access[i] = k;
	}
	delay = DT_MIN(delay, 
      cam->next_access[i] - now);
  }
  
  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
    "no cam ready, delaying %ld seconds",
    delay);

  do {
	long doze = DT_MIN(delay, 30);
	if (cam->autotime == 0)				/* want real time? 					*/
      dtos_delay(ctl, doze * 1000);		/* really delay 					*/
	else								/* fake time? 						*/
	  cam->autotime += doze;			/* auto advance time 				*/
	delay -= doze;
  } while(delay);

  if (cam->autotime - midnight >= 		/* end of the day? 					*/
	  60*60*24)
  {
	if (cam->autoday == 13)
	{
  	  *cam_index = -1;
	  goto cleanup;
	}
    cam->autoday++;
  }

  goto again;

cleanup:

  if (DT_DBG(ctl, DT_DBG_MASK_WIN))
  {
	char s[32];
	time_t clock = cam->autotime? cam->autotime: time(NULL);
	strcpy(s, asctime(localtime(&clock)));
	s[strlen(s)-1] = '\0';
	dt_dbg(ctl, F, DT_DBG_MASK_WIN,
      "shoot cam index %d at %s",
      *cam_index, s);
  }
  return rc;
}

/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
tableau_cam_last(
  dtparam_t *param,
  tableau_cam_t *cam,
  int *cam_index)
{
  DT_F("tableau_cam_last");
  *cam_index = cam->last_index;
  return DT_RC_GOOD;
}
