/*..........................................................................
| name
| Introduction - intro
|
| DESCRIPTION
| As yet undocumented.
| 
| RETURN VALUES
| All functions Return DTOS_RANWELL on success.  
| Any other return value indicates failure.
| 
| ERRORS
| As yet undocumented.
| 
| END
 *..........................................................................*/

#include <dt.h>
DT_RCSID("source/screen $RCSfile: hwsfgw.c,v $ $Revision: 1.1 $");

#if DTPRJ_FGW == DT_1

#  ifndef DTDEPEND
#    include <fgwin.h>
#  endif

#endif

#include <dtos.h>
#include <dtlist.h>
#include <dtlut8.h>
#include <dtsvc.h>
#include <dthws.h>
#include <dtstr.h>

#include <dtmsw.h>

extern
dt_rc_e 
DTCONFIG_API1
dtmsw_message_string(					/* convert message to string		*/
  dt_ctl_t *ctl,
  int message,
  const char **string);

#if DTPRJ_FGW == DT_1

extern dthws_connect_f dthws_connect;
static dthws_disconnect_f dthws_fgw_disconnect;
static dthws_win_create_f dthws_fgw_win_create;
static dthws_wait_event_f dthws_fgw_wait_event;
static dthws_win_destroy_f dthws_fgw_win_destroy;
static dthws_export_data_f dthws_fgw_export_data;
static dthws_import_data_f dthws_fgw_import_data;
static dthws_export_color_f dthws_fgw_export_color;
static dthws_import_color_f dthws_fgw_import_color;
static dthws_win_clear_f dthws_fgw_win_clear;
static dthws_win_raise_f dthws_fgw_win_raise;
static dthws_win_lower_f dthws_fgw_win_lower;
static dthws_win_cursor_f dthws_fgw_win_cursor;

#include <dtmem.h>

typedef struct {
  HWND hwnd;
  HDC hdc;
  int inverted;
  int destroyed;						/* destroyed by window manager 		*/
  int control_key;
  int shift_key;
  char name[DT_WINDOWNAME_MAXLEN+1];
} dthws_fgw_priv_win_t;

typedef struct {
  const char *classname;
  HPALETTE hpal;
  unsigned char tmplut[768];
} dthws_fgw_priv_t;

#define LONG_CTL (0)					/* SetWindowLong indexes 			*/
#define LONG_HWS (4)
#define LONG_HWS_WIN (8)
#define LONG_EXTRA (12)					/* amount of extra data 			*/

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_disconnect(
  dt_ctl_t *ctl,
  dthws_t *hws)
{
  DT_F("dthws_fgw_disconnect");
  dthws_fgw_priv_t *priv =
    (dthws_fgw_priv_t *)hws->priv;
  
  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
    "disconnecting");

  fg_vbfin();							/* terminate virtual buffers		*/
  
  DeleteObject(priv->hpal);				/* get rid of pallette 				*/

  DT_Q(dtos_free2,(ctl, priv,
    F, "priv"));
  
  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
    "disconnected");

  return DT_RC_GOOD;
}

/*..........................................................................
 * window structure has already been found or allocated and name assigned
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_create(					/* make/display a new window		*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  const char *windowname,
  int x0,
  int y0,
  int xe,
  int ye,
  int bits)
{
  DT_F("dthws_fgw_win_create");
  dthws_fgw_priv_t *priv =
    (dthws_fgw_priv_t *)hws->priv;
  dthws_fgw_priv_win_t *priv_win;
  dtmsw_t *msw = (dtmsw_t *)ctl->msw;	/* reference special msw structure 	*/

  if (msw == NULL)
    return dt_err(ctl, F,
      "msw structure is NULL"
      " (program not initialized correctly)");

  if (strlen(windowname) >
      sizeof(priv_win->name)-1)
    return dt_err(ctl, F,
      "\"%s\" too long", windowname);

  DT_Q(dtos_malloc2,(ctl,				/* space for the private structure 	*/
    &hws_win->priv,
    sizeof(*priv_win),
    F, "priv win"));
  priv_win = (dthws_fgw_priv_win_t *)
    hws_win->priv;

  memset(priv_win, 0, 
    sizeof(*priv_win));

  strcpy(priv_win->name,
    windowname);

										/* ................................ */
  priv_win->hwnd = CreateWindow(		/* create the image window 		*/
    priv->classname, 
    priv_win->name,
	WS_OVERLAPPEDWINDOW,
    x0, y0, xe+8, ye+27,
    (HWND)NULL, 
    (HMENU)NULL,
    (HINSTANCE)msw->hinstance, 
    NULL);
  if (priv_win->hwnd == (HWND)NULL)
    return dt_err(ctl, F,
      "CreateWindow(class=\"%s\","
      " name=\"%s\") failed"
#     ifdef DTCONFIG_IMPLIED_MSW32
        " (GetLastError=%ld)"
#     endif
      ,
      priv->classname,
	  priv_win->name
#     ifdef DTCONFIG_IMPLIED_MSW32
        , GetLastError()
#     endif
    );
	
  hws_win->id = (long)priv_win->hwnd;	/* unique window identifier			*/

  hws_win->xe = xe;						/* remember the size			    */
  hws_win->ye = ye;

  hws_win->x0 = x0;						/* remember the position 			*/
  hws_win->y0 = y0;

  SetWindowLong(priv_win->hwnd,			/* pass stuff into window proc 		*/
    LONG_CTL,
    (long)ctl);
  SetWindowLong(priv_win->hwnd, 
    LONG_HWS, 
    (long)hws);
  SetWindowLong(priv_win->hwnd, 
    LONG_HWS_WIN,
    (long)hws_win);

  priv_win->hdc = GetDC(				/* get and keep the window's dc	    */
    priv_win->hwnd);
  if (priv_win->hdc == (HDC)NULL)
    return dt_err(ctl, F,
      "GetDC failed");

  fg_setdc(priv_win->hdc);				/* activate before realizing	    */

  if (priv->hpal == (HDC)NULL)			/* no pallette created yet?		    */
  {
	int i;
	unsigned char *tmplut = 
      priv->tmplut;
	for (i=0; i<256; i++)				/* customize the pallette 			*/
	{
      *tmplut++ = i;
	  *tmplut++ = i;
	  *tmplut++ = i;
	}
    priv->hpal = fg_logpal(10, 236,		/* get a logical pallette 			*/
      (char *)priv->tmplut);
    if (priv->hpal == (HPALETTE)NULL)
	  return dt_err(ctl, F,
        "fg_logpal failed");
	fg_realize(priv->hpal);				/* activate the pallette 			*/
	dt_dbg(ctl, F, DT_DBG_MASK_LUT,
      "created pallette 0x%08lx"
      " on dc 0x%08lx",
      (long)priv->hpal, 
      (long)priv_win->hdc);
  }
  else
	fg_realize(priv->hpal);				/* activate the pallette 			*/

  ShowWindow(priv_win->hwnd,			/* pop up the window				*/
    SW_NORMAL);
  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
    "ShowWindow(0x%04x) called", priv_win->hwnd);

  UpdateWindow(priv_win->hwnd);			/* send (not post) paint message    */

  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
    "UpdateWindow(0x%04x) called", priv_win->hwnd);

  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_update(						/* write window's data				*/
  dt_ctl_t *ctl,
  HDC hdc,
  HPALETTE hpal,
  void *memalloc,
  int x0,
  int y0,
  int xe,
  int ye)
{
  DT_F("dthws_fgw_update");
  int handle;
  int fgrc = -1;
  long offset = (long)y0 * (long)xe;
  long max = (long)xe * (long)ye;
  int row;
  dt_rc_e rc = DT_RC_GOOD;

  handle = fg_vballoc(xe, ye);			/* virtual buffer for our data 	*/
  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
	"x0=%d y0=%d, fg_vballoc(%d, %d) = %d",
    x0, y0, xe, ye, handle);

  if (handle < 0 || handle > 31)
  {
	rc = dt_err(ctl, F,
      "invalid handle %d returned"
      " by fg_vballoc(%d, %d)",
      handle, xe, ye);
	goto cleanup;
  }

  fgrc = fg_vbopen(handle);				/* make us the active virtual buffer */
  if (fgrc != 0)
  {
	rc = dt_err(ctl, F,
      "fg_vbopen(%d) failed, rc %d",
      handle, fgrc);
	goto cleanup;
  }

  fg_setdc(hdc);

  fg_vbcolors();						/* set vb's colors to pallette's    */

  row = 0;
  while (row<ye)
  {
	void *data;
	unsigned int size, nrows;
	DT_Q(dtmem_map,(ctl,				/* map next chunk					*/
      memalloc, offset,
      &data, &size));
	nrows = size / xe;
	fg_move(0, row+nrows-1);
	fg_putimage((char *)data, xe,		/* copy data into virtual buffer	*/
      nrows);
	row += nrows;
	DT_Q(dtmem_unmap,(ctl,				/* unmap the chunk					*/
      memalloc, offset));
	offset += size;
  }

  fg_vbpaste(							/* virtual buffer to active page 	*/
    0, xe-1, 0, ye-1,
    x0, y0+ye-1);

cleanup:
  if (fgrc == 0)
    fg_vbclose();

  if (handle >= 0 && 
	  handle <= 31)
    fg_vbfree(handle);

  return rc;
}

/*..........................................................................
 *..........................................................................*/

long WINAPI _export
dthws_fgw_wndproc(
  HWND hwnd,
  UINT message,
  UINT wparam,
  LONG lparam)
{
  DT_F("dthws_fgw_wndproc");
  PAINTSTRUCT ps;
  long procrc = 0;

  dt_ctl_t *ctl;
  dthws_win_t *hws_win;
  dthws_t *hws;
  dthws_fgw_priv_t *priv;
  dthws_fgw_priv_win_t *priv_win;

  ctl = (dt_ctl_t *)
    GetWindowLong(hwnd, LONG_CTL);
  hws = (dthws_t *)
    GetWindowLong(hwnd, LONG_HWS);
  priv = (dthws_fgw_priv_t *)
    (hws == NULL? NULL: hws->priv);
  hws_win = (dthws_win_t *)
    GetWindowLong(hwnd, LONG_HWS_WIN);
  priv_win = (dthws_fgw_priv_win_t *)
    (hws_win == NULL? NULL: hws_win->priv);

  if (message != WM_PAINT)
  {
	const char *s;
	dtmsw_message_string(ctl,			/* look up message string 			*/
      message, &s);
	dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
      "0x%04x, 0x%04x (%s), 0x%04x, 0x%08lx",
	  hwnd,
      message, s, wparam,
      lparam);
  }
  
  switch(message)
  {
										/* ................................ */
	case WM_PAINT:

	  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "got WM_PAINT"
        " priv=0x%08lx"
        " priv->hpal=0x%08lx",
        " priv_win=0x%08lx",
        (long)priv, (long)priv->hpal, (long)priv_win);

	if (priv != NULL &&
		priv->hpal != (HDC)NULL &&
		priv_win != NULL)
	{
	  HDC hdc;
	  dt_rc_e rc;
	  hdc = BeginPaint(hwnd, &ps);

	  if (DT_DBG(ctl, DT_DBG_MASK_ASYNC) &&
		  DT_DBG(ctl, DT_DBG_MASK_PIXEL))
	  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "\%s\" got WM_PAINT"
        " priv_win->hdc=0x%08lx"
        " BeginPaint=0x%08lx",
        priv_win->name,
        (long)priv_win->hdc,
        (long)hdc);

	  DT_G(dthws_fgw_update,(ctl, 		/* write window's data				*/
        priv_win->hdc,
        priv->hpal,						/* pallette everyone's using	    */
        hws_win->memalloc,				/* data from backing store 			*/
        0, 0,							/* just update the whole thing	    */
        hws_win->xe,
        hws_win->ye));

	  EndPaint(hwnd, &ps);
	}
	break;
										/* ................................ */
	case WM_SIZE:
	if (priv_win != NULL)
	{
	  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "\%s\" got WM_SIZE %d %d",
        priv_win->name, 
        LOWORD(lparam), 
        HIWORD(lparam));
	}
	break;
										/* ................................ */
	case WM_SETFOCUS:
	if (priv != NULL &&
		priv->hpal != (HDC)NULL)
	{
	  dt_dbg(ctl, F, 
        DT_DBG_MASK_ASYNC |
        DT_DBG_MASK_LUT,
        "SETFOCUS realizing pallette"
        " 0x%08lx on dc 0x%08lx",
        (long)priv->hpal, 
        (long)priv_win->hdc);
      fg_setdc(priv_win->hdc);
      fg_realize(priv->hpal);
      InvalidateRect(hwnd, NULL, TRUE);
	}
	break;
										/* ................................ */
    case WM_DESTROY:
	  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "\"%s\" got WM_DESTROY",
        priv_win->name);
	  priv_win->destroyed = 1;			/* mark window destroyed			*/
	break;
										/* ................................ */
	default:
	  procrc = DefWindowProc(hwnd,
        message, wparam, lparam);
  }
  return procrc;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_wait_event(					/* hold window until user interacts	*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dtsvc_t *svc,
  double timeout,
  int flag,
  dt_event_t *event)
{
  DT_F("dthws_fgw_wait_event");
  dtmsw_t *msw = (dtmsw_t *)ctl->msw;	/* reference special msw structure 	*/
  dthws_win_t *hws_win;
  dtlist_elem_t *elem;
  dthws_fgw_priv_win_t *priv_win;
  int pending;
  int quit = 0;
  MSG msg;

  if (event == NULL)
	return DT_RC_GOOD;

  elem = DTLIST_ELEM_HEAD;
  while (elem)
  {
	DT_Q(dtlist_next,(ctl,				/* fetch next window in list	    */
      &hws->windowlist, elem, &elem));
	if (elem == NULL)					/* the last in the list?	    	*/
	  break;
	hws_win = (dthws_win_t *)elem->user;
	priv_win = (dthws_fgw_priv_win_t *)
      hws_win->priv;
	  
	if (priv_win->destroyed)			/* this window is destroyed? 		*/
	{
	  event->type = DT_EVENT_DESTROYED;	/* tell upper layers about this		*/
	  event->id = priv_win->hwnd;		/* tell who got destroyed			*/
	  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "returning DESTROYED event"
        " for \"%s\" (0x%04x)",
        priv_win->name, event->id);
	  return DT_RC_GOOD;
	}
  }

  do {
	memset(event, 0, sizeof(*event));	/* clear output event structure	    */
  
	event->type = DT_EVENT_NOTHING;		/* in case nothing happens 			*/
	
	if (svc != NULL)					/* we are using dt svc?		    	*/
	{
	  int svcpending;
	  DT_Q(svc->issvc,(ctl,				/* see if we have any svc input	    */
        svc, 0, NULL, &svcpending));
	  if (svcpending)					/* an svc connection is waiting? 	*/
	  {			
		event->type = DT_EVENT_IPC;
		dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
          "svc input found at poll");
		break;							/* let caller handle it immediately */
	  }
	}

    pending = PeekMessage(&msg, NULL,	/* check event queue				*/
      0, 0, PM_NOREMOVE);

    if (pending && msw != NULL &&		/* this is a control event?		    */
		(long)msg.hwnd == msw->pidwin)
	{
	  DT_Q(dtmsw_yield,(ctl));			/* pick off the control event		*/
	  continue;
	}

	if (pending)						/* we have a pending display event?	*/
	{
	  GetMessage(&msg, (HWND)NULL,		/* grab the pending event 			*/
        0, 0);
	}
										/* ................................ */
	else								/* no events pending?				*/
	if (timeout == -1)					/* this is only a poll?		    	*/
	{
      break;							/* out of while(!quit) loop			*/
	}
										/* ................................ */
	else								/* not a poll and no events? 		*/
	{						
	  /* WaitMessage();					/* this means we really wait 		*/
#     ifdef DTCONFIG_IMPLIED_WIN32
	    DT_Q(dtos_delay,(ctl, 200));	/* sleep a short time on Win32		*/
#     endif
#     ifdef DTCONFIG_IMPLIED_WIN16
	    DT_Q(dtmsw_yield,(ctl));		/* just yield on Win16				*/
#     endif
	  continue;
	}

    elem = DTLIST_ELEM_HEAD;
    while (elem)
    {
      DT_Q(dtlist_next,(ctl,			/* fetch next window in list	    */
        &hws->windowlist, elem,
        &elem));
      if (elem)							/* not the last in the list?	    */
	  {
		hws_win = (dthws_win_t *)elem->user;
		if (hws_win->id == (int)msg.hwnd)
		  break;
	  }
    }

    if (elem == NULL)					/* didn't find the window?			*/
	{
	  const char *s;
	  dtmsw_message_string(ctl,			/* look up message string 			*/
        msg.message, &s);
      dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
        "%d=0x%04x=%s"
        " on non-hws win 0x%08lx",
        msg.message, 
        msg.message, 
        s,
        (long)msg.hwnd);
      break;							/* quit for now 					*/
   /* continue; */						/* can't make us quit			    */
	}

    event->id = (int)msg.hwnd;			/* remember where event happened    */

    priv_win = (dthws_fgw_priv_win_t *)	/* our private info on the window 	*/
      hws_win->priv;

    event->type = DT_EVENT_NOTHING;

	switch (msg.message)
	{
      case WM_QUIT:
  	    return dt_err(ctl, F,
          "got WM_QUIT on window 0x%08lx",
          (long)priv_win->hwnd);
										/* ................................ */
      case WM_KEYDOWN:
	  {
		int vk = msg.wParam;
		switch(vk)
		{
		  case VK_LEFT:      event->keys[0] = DT_KEY_LEFTARROW;  break;
		  case VK_RIGHT:     event->keys[0] = DT_KEY_RIGHTARROW; break;
		  case VK_UP:        event->keys[0] = DT_KEY_UPARROW;    break;
		  case VK_DOWN:      event->keys[0] = DT_KEY_DOWNARROW;  break;
		  case VK_ESCAPE:    event->keys[0] = DT_KEY_ESCAPE;     break;
		  case VK_BACK:      event->keys[0] = 0x08;              break;
		  case VK_TAB:       event->keys[0] = 0x09;              break;
		  case VK_RETURN:    event->keys[0] = '\n';              break;
		  case VK_CONTROL:   priv_win->control_key = 1;          break;
		  case VK_SHIFT:     priv_win->shift_key = 1;            break;
		  default:           event->keys[0] = vk;
		}
		if (event->keys[0] != '\0')
		{
		  if (priv_win->control_key)	/* control key down? 				*/
		  {
			if (vk >= 'A' &&			/* plus an alpha character? 		*/
				vk <= 'Z')
			  event->keys[0] -= 0x40;	/* change to control character 		*/
		  }
		  else
		  if (priv_win->shift_key)		/* shift but not control? 			*/
		  {
			if (vk >= '0' &&			/* numeric key? 					*/
				vk <= '9')
			  event->keys[0] -= 0x10;	/* change to punctuation 			*/
			else
			if (vk == ',') 
			  event->keys[0] = '<';
			else
			if (vk == '.') 
			  event->keys[0] = '>';
			else
			if (vk == '/') 
			  event->keys[0] = '?';
			else
			if (vk == '-') 
			  event->keys[0] = '_';
			else
			if (vk == '+') 
			  event->keys[0] = '=';
			else
			if (vk == ';') 
			  event->keys[0] = ':';
			else
			if (vk == '\'') 
			  event->keys[0] = '"';
			else
			if (vk == '[') 
			  event->keys[0] = '{';
			else
			if (vk == ']') 
			  event->keys[0] = '}';
			else
			if (vk == '\\') 
			  event->keys[0] = '|';
			else
			if (vk == '`') 
			  event->keys[0] = '~';
		  }
		  else							/* neither control nor shift 		*/
		  {
			if (vk >= 'A' &&
				vk <= 'Z')
			  event->keys[0] += 0x20;	/* change to lower case ascii 		*/
		  }
          event->type = DT_EVENT_KEYBOARD;
          event->nkeys = 1;
		  {
			char s[64];
			dtstr_printchar(ctl, event->keys[0], s, sizeof(s));
		    dt_dbg(ctl, F,
              DT_DBG_MASK_ASYNC,        
              "window \"%s\" saw KEYDOWN VK 0x%02x maps to \"%s\"",
              priv_win->name,
              msg.wParam, s);
		  }
		}
		else
		{
		  dt_dbg(ctl, F,
            DT_DBG_MASK_ASYNC,        
            "window \"%s\" saw KEYDOWN VK 0x%02x ignored",
            priv_win->name,
            msg.wParam);
		}
	  }
	  break;
										/* ................................ */
      case WM_KEYUP:
        dt_dbg(ctl, F,
          DT_DBG_MASK_ASYNC,        
          "window \"%s\" saw KEYUP VK 0x%02x",
          priv_win->name,
          msg.wParam);
		switch(msg.wParam)
		{
		  case VK_CONTROL:   priv_win->control_key = 0; break;
		  case VK_SHIFT:     priv_win->shift_key = 0; break;
		}
	  break;
										/* ................................ */
    }
	
	dthws_fgw_wndproc(msg.hwnd,			/* tell Windows about the event		*/
      msg.message, msg.wParam,
      msg.lParam);

    if (event->type !=					/* user-generated event?		    */
        DT_EVENT_NOTHING)
	{
	  if (flag == 0)					/* just polling? 					*/
	    quit = 1;
	  else
      if (flag == 1)					/* to quit after any event?			*/
        quit = 1;
      else
      if (flag == 3)					/* to quit on any user event?	    */
        quit = 1;
	}
	else								/* non-user event?				    */
	{
	  if (flag == 1 &&					/* supposed to quit immediately?    */
          !PeekMessage(&msg,			/* event queue has nothing else?	*/
            (HWND)NULL, 0, 0,    
            PM_NOREMOVE))
        quit= 1;
	}
	if (flag == 0 &&					/* just polling? 					*/
		!PeekMessage(&msg,				/* event queue has nothing else?	*/
          (HWND)NULL, 0, 0,    
          PM_NOREMOVE))
      quit= 1;
  } while (!quit);

  return DT_RC_GOOD;
}
#undef F

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_destroy(					/* get rid of window			    */
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win)
{
  DT_F("dthws_fgw_win_destroy");
  dthws_fgw_priv_win_t *priv_win =
    (dthws_fgw_priv_win_t *)hws_win->priv;
  dt_rc_e rc = DT_RC_GOOD;

  dt_dbg(ctl, F, DT_DBG_MASK_WIN,
    "destroying \"%s\"",
    priv_win->name);

  if (priv_win->hwnd != (HWND)NULL)
  {
	if (priv_win->hdc != (HDC)NULL)
      ReleaseDC(priv_win->hwnd, 
        priv_win->hdc);
	DestroyWindow(priv_win->hwnd);
  }

  DT_I(dtos_free2,(ctl, priv_win,
    F, "priv win"));

  return rc;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_export_color(					/* write window's colormap			*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  dtlut8_t *lut8,
  int start,
  int count)
{
  DT_F("dthws_fgw_export_color");
  dthws_fgw_priv_t *priv =
    (dthws_fgw_priv_t *)hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    (dthws_fgw_priv_win_t *)(hws_win? hws_win->priv: NULL);
  unsigned char *tmplut;
  int i;

  if (hws_win == NULL)					/* color setting background lut? 	*/
    return DT_RC_GOOD;					/* don't do it 						*/

  if (priv->hpal == (HPALETTE)NULL)
	return dt_err(ctl, F,
      "no pallette assigned");

  tmplut = priv->tmplut;
  for (i=0; i<count; i++)
  {
	*tmplut++ = lut8[i].r;
	*tmplut++ = lut8[i].g;
	*tmplut++ = lut8[i].b;
  }
  
  DeleteObject(priv->hpal);				/* get rid of pallette 				*/
		 
  fg_setdc(priv_win->hdc);				/* activate before realizing	    */

#ifdef NONO
  fg_realize(priv->hpal);				/* activate the pallette 			*/

  fg_setdacs(start, count,				/* update colors 					*/ 
    priv->tmplut);		
#endif

  priv->hpal = fg_logpal(start, count,	/* get a new logical pallette 		*/
    (char *)priv->tmplut);
  if (priv->hpal == (HPALETTE)NULL)
	return dt_err(ctl, F,
      "fg_logpal failed");

  fg_realize(priv->hpal);				/* activate the pallette 			*/

  dt_dbg(ctl, F, DT_DBG_MASK_LUT,
    "new pallette %d colors starting at %d"
    " in pallette 0x%08lx"
    " on dc 0x%08lx",
    count, start,
    (long)priv->hpal, 
    (long)priv_win->hdc);

	  DT_Q(dthws_fgw_update,(ctl, 		/* write window's data				*/
        priv_win->hdc,
        priv->hpal,						/* pallette everyone's using	    */
        hws_win->memalloc,				/* data from backing store 			*/
        0, 0,							/* just update the whole thing	    */
        hws_win->xe,
        hws_win->ye));

  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_export_data(					/* write window's data				*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  void *data,
  int x0,
  int y0,
  int xe,
  int ye)
{
  DT_F("dthws_fgw_export_data");
  dthws_fgw_priv_t *priv =
    (dthws_fgw_priv_t *)hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    (dthws_fgw_priv_win_t *)hws_win->priv;

  DT_Q(dthws_fgw_update,(ctl,
    priv_win->hdc, 
    priv->hpal,
    hws_win->memalloc,					/* data from backing store 			*/
    x0, y0, xe, ye));

  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_import_data(					/* get window's data				*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *win,
  void *data,
  int x0,
  int y0,
  int xe,
  int ye)
{
#ifdef NONO
  DT_F("dthws_fgw_import_data");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    win->priv;
#endif
  return DT_RC_GOOD;
}

/*..........................................................................
| lut[N].i members not changed
| 
| color start is put into lut[0], start+count into lut[count-1]
|
| if hws_win is NULL, then DefaultColormap of screen is returned
*..........................................................................*/

static
dt_rc_e
dthws_fgw_import_color(					/* get window's colormap			*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  dtlut8_t *lut,
  int start,
  int count)
{
#ifdef NONO
  DT_F("dthws_fgw_import_color");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  int i;
  for (i=0; i<count; i++)				/* store in caller's array		   	*/
  {
    lut[i].r = i+start;
    lut[i].g = i+start;
    lut[i].b = i+start;
	lut[i].i = (i > 16 && i < 240);		/* presume all cells free 			*/
  }

  return DT_RC_GOOD;
}


/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_clear(						/* clear window						*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  int background)
{
#ifdef NONO
  DT_F("dthws_fgw_win_clear");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_raise(						/* raise window						*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win)
{
#ifdef NONO
  DT_F("dthws_fgw_win_raise");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_lower(						/* lower window						*/
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win)
{
#ifdef NONO
  DT_F("dthws_fgw_win_lower");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_cursor(
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  int *x,
  int *y,
  int op)
{
#ifdef NONO
  DT_F("dthws_fgw_win_cursor");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dthws_fgw_win_move(
  dt_ctl_t *ctl,
  dthws_t *hws,
  dthws_win_t *hws_win,
  int x,
  int y)
{
#ifdef NONO
  DT_F("dthws_fgw_win_move");
  dthws_fgw_priv_t *priv =
    hws->priv;
  dthws_fgw_priv_win_t *priv_win =
    hws_win->priv;
#endif
  return DT_RC_GOOD;
}

#endif

/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
dthws_fgw_connect(
  dt_ctl_t *ctl,
  dthws_t *hws,
  char *server)
{
  DT_F("dthws_fgw_connect");
#if DTPRJ_FGW == DT_1
  dthws_fgw_priv_t *priv = NULL;
  dtmsw_t *msw = (dtmsw_t *)ctl->msw;	/* reference special msw structure 	*/
  WNDCLASS c;
  ATOM atom;
  dt_rc_e rc;

  if (msw == NULL)
    return dt_err(ctl, F,
      "msw structure is NULL"
      " (program not initialized correctly)");

  DT_C(dtos_malloc2,(ctl, 
    (void **)&priv,
    sizeof(*priv),
    F, "priv"));

  memset(priv, 0, sizeof(*priv));

  priv->classname = "dtfgw_class";

  memset(&c, 0, sizeof(c));
  c.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
  c.lpfnWndProc = dthws_fgw_wndproc;
  c.cbWndExtra = LONG_EXTRA;
  c.hInstance =							/* make sure class exists 			*/
    (HINSTANCE)msw->hinstance;
  c.hbrBackground = (HBRUSH)
    GetStockObject(WHITE_BRUSH);
  c.lpszClassName = priv->classname;

  atom = RegisterClass(&c);
  if (atom == 0)
    return dt_err(ctl, F,
      "RegisterClass(\"%s\") failed"
#     ifdef DTCONFIG_IMPLIED_MSW32
        " (GetLastError=%ld)"
#     endif
      ,
      c.lpszClassName
#     ifdef DTCONFIG_IMPLIED_MSW32
        , GetLastError()
#     endif
    );

  fg_vbinit();							/* start virtual buffers 			*/

  hws->priv = (void *)priv;
  hws->xe = 640;						/* return display size to caller    */
  hws->ye = 480;
  hws->do_remap = 0;					/* we don't remap ourselves 		*/
  hws->do_ymirror = 1;					/* data in backing store mirrored 	*/

  hws->disconnect = dthws_fgw_disconnect;
  hws->win_create = dthws_fgw_win_create;
  hws->wait_event = dthws_fgw_wait_event;
  hws->win_destroy = dthws_fgw_win_destroy;
  hws->export_data = dthws_fgw_export_data;
  hws->import_data = dthws_fgw_import_data;
  hws->export_color = dthws_fgw_export_color;
  hws->import_color = dthws_fgw_import_color;
  hws->win_move = dthws_fgw_win_move;
  hws->win_clear = dthws_fgw_win_clear;
  hws->win_raise = dthws_fgw_win_raise;
  hws->win_lower = dthws_fgw_win_lower;
  hws->win_cursor = dthws_fgw_win_cursor;

cleanup:
  if (rc != DT_RC_GOOD &&
	  priv != NULL)
    DT_I(dtos_free2,(ctl, priv,
      F, "priv"));
  return rc;

# else
  return dt_err_notlinked(ctl, F, "Fastgraph for windows");
# endif
}
