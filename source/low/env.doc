/*..........................................................................
| TITLE dtenv()
|dxinclude(liblink1.dx)
|_link dtparam, dtdoclist(dtparam, title)
|		Parameter parsing.
|
|!Overview
|_index runtime environment
|_index environment, runtime
| The Environment Function Groups are useful functions for
|_aside Run-time environment control.
| control of the program's execution environment.
| 
| These Function Groups have in common that they
|_Aside These are objectless Function Groups.
| don't really have objects to operate on.
| That is, they don't have data structures corresponding to them.
| This is indicated by their names which all
| begin with :dt_: instead of the customary :dtxxxx_:.
| 
| All variables needed by these Function Groups
|_Aside ~*ctl~ is ubiquitous.
| to do their jobs
| are kept in the ~*ctl~ structure.
| Since virtually all Dtack Imaging Software functions 
| take the ~*ctl~ structure in their argument lists,
| it is a convenient vehicle for the environment control of the running program.
| 
| The Environment Function Groups are:
| :assert:	assert
| :dbg:		debugging
| :enter:	program environment initialization
| :err:		error handling
| :heapmon:	malloc() and free() monitoring
| :leave:	program environment termination
| :say:		console output
| :yield:	time slice yielding
|
| Each group contains the following functions:
| 
| #The :assert: Function Group#
| dt_assert()			issue a debug message based on condition truth
| dt_assert_va()		issue a truth message from :va_list: structure
| #The :dbg: Function Group#
| dt_dbg()				issue a debug message
| dt_dbg_va()			issue a debug message from :va_list: structure
| dt_dbg_trace()		issue a trace-type debug message
| dt_dbg_parse()		create debug mask from string
| #The :enter: Function Group#
| dt_enter_arg()		specify positional arguments
| dt_enter_parse()		parse command line, set up ~*ctl~ environment
| #The :err: Function Group#
| dt_err()				issue an error message
| dt_err_va()			issue an error message from :va_list: structure
| #The :heapmon: Function Group#
| dt_heapmon_init()		begin malloc() and free() monitoring
| dt_heapmon_uninit()	end malloc() and free() monitoring
| dt_heapmon_report()	report malloc() and free() statistics
| dt_heapmon_check()	check heap integrity
| #The :leave: Function Group#
| dt_leave()			clean up resources used by the :enter: Function Group
| #The :say: Function Group#
| dt_say()				output a console message
| dt_say_va()			output a console message from :va_list: structure
| #The :yield: Function Group#
| dt_yield()			yield timeslice
| dt_yield_parse()		create yield mode flags from string
|
| [fig:env1] illustrates the interrelationships between the
| Environment Function Groups within your program.
| It shows that your program has direct access to all of the Function Groups.
| It also shows clearly that the :heapmon: Function Group is never
| called from anywhere but your program.
| Everyone can to debug and generate errors.
|_figure picture, env1, Environment Function Groups Hierarchy
|
|!Summary
| This section briefly summarizes each of the Function Groups.
| Key terms are highlighted in #boldface#.
|
|.The :assert: Function Group
| Formats and outputs a debug message based on a truth #condition#.
| True conditions are filtered by debug class :DT_DBG_MASK_ASSERT:
| while false assertions are always output.
| Output goes through dt_dbg().
| This Function Group is used heavily by Dtack Imaging Software test programs.
| 
|.The :dbg: Function Group
| All debug messages go through dt_dbg().
| Where the debug message goes is customizable
| by providing your own function pointer at ~ctl->dbg~ and/or
| ~ctl->dbg_string~.
| Each debug message has a #class#.
| No debug message is printed unless its class is enabled.
| A class or classes may be enabled by setting bits in ~ctl->dbg_mask~.
| this is done automatically by dt_enter_parse()
| from the :-D: command line keyword parameter.
| 
|.The :enter: Function Group
| Can be used to parse a command line
| and set up program environment in ~param->ctl~.
| The command line must be in C main argc/argv format.
| It consists of #keyword/value parameters# and #positional arguments#. 
| The ~param~ structure describes the parameters
| and contains four members for each of 50 or so predefined
| keywords: value, short description, longer help, and flags.
| For a keyword to be parsable, its #flag# must be set.
| This can be done directly or by using the dtparse_set().
| 
| After the parameters come the arguments.
| Each argument is described by four members of a ~arg~ structure:
| string value, maximum value length, short description, and
| longer help.
| The ~arg~ structure array may be set up directly or done by
| dt_enter_arg().
| 
|.The :err: Function Group
| All #error messages# go through dt_err().
| The disposal of the error message can be customized
| by providing your own function pointer at ~ctl->err~ and/or
| ~ctl->err_string~.
|
|.The :heapmon: Function Group
| The heap is where malloc() gets its allocations.
| Enables #heap monitoring#, if available, in the program environment, ~ctl~.
| You can get the current number of bytes and blocks outstanding or
| a debug report of the current heap usage.
| Heap monitoring can check for heap corruption,
| memory overrun, freeing unallocated memory, and memory leaks.
| One of several heap monitoring #implementations#
| must be selected at compile time:
| no heap monitoring, Dtack-written heap monitoring, or
| third party commercial package heap monitoring.
|
|.The :leave: Function Group
| dt_leave() just releases resources allocated by dt_enter_parse().
| 
|.The :say: Function Group
| All #console messages# go through dt_say().
| Console messages never go to :stdout: or :stderr:.
| They come out on the screen even when :stdout: is redirected to a file.
| The disposal of the console message can be customized
| by providing your own function pointer at ~ctl->say~ and/or
| ~ctl->say_string~.
|
|.The :yield: Function Group
| Contains a function for setting a #yield control word#
| ~ctl->yield_flags~.
| Based on hints in this control word, number crunching functions
| decide when to call the yield function ~ctl->yield~.
| The yield function yields a #timeslice# to the operating system.
| This function is indispensable on operating systems which are
| not preemptively multi-tasked.
| The yield function
| may also send an "I am alive" message to a full-screen dialog
| or check for a keystroke.
| This Function Group provides a #default yield function#,
| or you may provide your own.
|
|!The :assert: Function Group
| This Function Group consists of just two functions.
| 
| dt_assert()			issue a debug message based on condition truth
| dt_assert_va()		issue a debug message based on condition truth
|						from :va_list: structure
|
| These functions format and print pretty debug messages
| based on a given condition.
| True conditions are filtered and only printed if
|_aside Normally silent.
| the :DT_DBG_MASK_ASSERT: class of debug messages is enabled.
| False conditions are always printed.
| 
| The :dbg: Function Group is used to output the messages.
|_Aside Uses debug output.
| Please see
|_hyper section, The :dbg: Function Group
|
| If your program calls dt_enter_parse(),
| the assertion debug messages may be enabled from the command line
| by giving :-D assert:.
| For more information, please refer to
|_hyper section, The :enter: Function Group
|
|!The :dbg: Function Group
|_index debug,, central function
| This Function Group centralizes debug output for all
|_aside Debug central.
| Dtack Imaging Software routines.
| The functions involved are:
| 
| dt_dbg()				issue a debug message
| dt_dbg_parse()		create debug mask from string
| dt_dbg_trace()		issue a trace-type debug message
| dt_dbg_va()			issue a debug message from :va_list: structure
| 
| All Dtack Imaging Software functions call dt_dbg() when they feel
| the need to print a debug message.
| A variable argument list holds the message format and
|_aside Message is given like for printf().
| values to be substituted exactly like the familiar sprintf().
| dt_dbg_va() does all the work given a :va_list: representation
| of the variable argument list.
| dt_dbg_trace() formats a debug message using the
| caller's file name and line number (:__FILE__: and :__LINE__:).
| Finally, dt_dbg_parse() takes a string and returns a debug mask.
| The string is supposed to contain debug specifiers
| in no particular order
| separated by plus (+) signs.
| An example would be :memtrace+page+assert:.
|
| There are many, many calls to dt_dbg() throughout the
| Dtack Imaging Software libraries.
| Each debug message has a certain class associated with it.
| For example, whenever memory allocation is being done,
| calls to dt_dbg() are being made with a class of :DT_DBG_MASK_MEM:.
| Similarly, when file reading and writing is happening,
| the classes are :DT_DBG_MASK_IO: and/or :DT_DBG_MASK_BIGIO:
| depending on the amount of data involved.
|_aside Classes are predefined.
| Here is a complete list up the debug classes:
|
|dxinclude(debug1.dx)
| 
| At runtime, specific classes can be enabled or filtered out.
| Your program can simply set bits in debug mask, ~ctl->dbg_mask~,
| at any time to change the amount debug volume.
|
| As convenience, the debug mask can be set for you based on
|_index command line,, debug mask
|_index debug mask,, from command line
|_aside Set debug mask from command line.
| a command line parameter.
| dt_enter_parse() does this.
| It scans the command line for the :-D: parameter.
| If this parameter is found, then its string value is passed
| to dt_dbg_parse() which returns a debug mask.
| The bits in this mask correspond to the classes named in the string value.
| The mask is stored in ~ctl->dbg_mask~ and thereafter used
| to enable or filter debug messages.
| 
| For example, suppose you run your program with the following command line:
| 
|:  myprog -D mem+io
|
| dt_enter_parse() would find the :-D: parameter,
| and cause the string value :"mem+io": to be parsed
| into the mask value :DT_DBG_MASK_MEM|DT_DBG_MASK_IO:.
| Then any Dtack Imaging Software function who calls dt_dbg()
| with matching class bits will have its message output.
|_Aside Debug messages get filtered out.
| Thousands of other calls to dt_dbg() throughout the library
| will output nothing because the bits don't match.
|
| Once dt_dbg() has determined that the message's class is enabled
|_Aside Formats like sprintf().
| for output, it formats the message.
| This involves replacing substitution substrings in the format string
| with values from the variable argument list.
| This process will be familiar to you since sprintf() does exactly
| the same thing.
|
| The :dbg: Function Group offers two levels of customization.
|_aside You can customize the debug handling.
| First,
| you can write your own debug handler which filters, formats and outputs
| the debug messages.
| Second, you can let dt_dbg() filter and format the message,
| then have it call your own function to actually output the message string.
| 
|!The :enter: Function Group
|_index runtime environment, setup
|_index environment, runtime, setup
| The :enter: Function Group sets up the program's execution environment.
|_aside Environment setup.
| It deals with command-line arguments and parameters.
| It also sets up the ~*ctl~ structure which is passed to virtually all
| Dtack Imaging Software routines.
|
| Before going further, it should be stated that the
|_Aside Convenient but not required.
| Dtack Imaging Software routines do not require your program
| to call the :enter: Function Group.
| The Function Group merely offers a convenient means of parsing
| the command line and using the values to
| set up the ~*ctl~ environment structure.
| You can either set up the ~*ctl~ structure yourself,
| give a ~*ctl~ structure which contains only zeros,
| or pass a NULL ~ctl~ pointer to all Dtack Imaging Software functions.
|
| The functions in the :enter: Function Group are:
| 
| dt_enter_arg()		specify positional arguments
| dt_enter_parse()		parse command line, set up ~*ctl~ environment
|
| dt_enter_arg() allows you to specify a list of the
| allowed and expected command line arguments.
| dt_enter_parse() parses the command line as described by the familiar
| ~argc~ and ~argv[]~ of main().
| 
| Several of the Dtack Imaging Software test and utility programs
|_aside Common startup sequence.
| are command line based and use the following template.
| For a complete and working program, please see
|_hyper section, Example dtenv3.c
|_index prolog code, common program
| 
|:  dtparam_t param;					// keyword parameter descriptions
|:  dt_enter_arg_t arg[4];
|:  dt_ctl_t *ctl = &param.ctl;			// for short
|:  dt_heapmon_init(ctl);				// begin heap monitoring
|:  dtparam_init(&param);				// initialize structure
|:  dtparam_set(&param, flag, ...);		// specify parameters wanted
|:  dt_enter_arg(ctl, arg, ...);		// specify arguments wanted
|:  dt_enter_parse(argc, argv,			// parse command line
|:    progname, usage, &param, arg, 
|:    checkfunc, checkarg)
|:
|:  ...   program does its thing    ...
|:  ... using param->xxx parameters ...
|:  ...   and arg[i].val arguments  ...
|:
|:  dt_leave(&param);					// release environment resources
|:  dt_heapmon_uninit(ctl)				// stop heap monitoring
| 
| The command line parsing function
| dt_enter_parse() assumes that the command line is structured as follows:
|_index command line,, parsing
|_index parsing,, command line
|_aside Basic command line syntax.
| 
|:  command parameters -- arguments
| 
| In this syntax, :command: is ~argv[0]~, the name of the program.
| Immediately following the command,
| are the :parameters: which consist of keyword/value pairs,
| with the keyword starting with a ':-:' character.
| The parameters are always optional and may be given in any order.
| The parameters end at the first non-keyword.
| This is where the :arguments: begin.
| The arguments are in position-dependent order.
|
| Before calling dt_enter_parse() to parse the command line,
| you need to initialize both a ~param~ and an ~arg~ structure.
| These structures describe the keyword parameters and positional arguments
| which are to the considered valid during parsing.
|
| Once dt_enter_parse() has executed successfully,
| your program has three things to look forward to:
| 
| 1.	it can easily see which parameters were given on the command line,
| 		and what values were given for them
| 2.	it can easily see the values for the positional arguments
| 3.	the ~param->ctl~ structure has been set up with an operating
| 		environment
| 
| It is perhaps the last of these which is the most helpful.
|dxinclude(ctl1.dx)
| The person running the program has runtime
|_aside Environment control from the command line.
|_index environment,, control from command line
| control over all these things through
| standard keyword parameters on the command line.
|
| This Function Group uses the :param: Function Group
| to do the parameter parsing, please refer to
|_hyper document, dtdoclist(dtparam, title)
|
| This Function Group may be used by programs with command line interfaces
| only.
| For programs desiring full-screen dialog interface,
| the :interactive: Function Group is provided by Dtack Imaging Software.
| Please see
|_hyper document, dtdoclist(dtinter, title)
|
|!The :err: Function Group
|_index error,, central function
| This Function Group centralizes error handling for all
|_aside Error central.
| Dtack Imaging Software routines.
| The functions involved are:
| 
| dt_err()				issue an error message
| dt_err_va()			issue an error message from :va_list: structure
| 
| All Dtack Imaging Software functions call dt_err() when they
| have detected an original error.
|_aside Original error.
| Original errors come from operating system calls that fail,
| such as malloc() or open().
| A non-good return code from another Dtack Imaging Software library routine
| does not qualify as an original error.
| 
| dt_err_va() does all the work given a :va_list: representation
| of the variable argument list.
| dt_err_va() formats the message by
|_Aside Formats like sprintf().
| replacing substitution substrings in the format string
| with values from the variable argument list.
| This process will be familiar to you since sprintf() does exactly
| the same thing.
|
| The :err: Function Group offers two levels of customization.
|_aside You can customize the error handling.
| First,
| you can write your own error handler which formats and outputs
| the error messages.
| Second, you can let dt_err() format the message,
| then call a function you specify to actually output the message 
| given as a sequence of strings.
|
|!The :heapmon: Function Group
| This Function Group provides a means for monitoring and reporting
| on heap memory usage.
| Heap memory is the memory used by malloc() and free().
|_aside malloc() and free().
| This Function Group has the following functions in it:
| 
| dt_heapmon_init()		begin malloc() and free() monitoring
| dt_heapmon_uninit()	end malloc() and free() monitoring
| dt_heapmon_report()	report malloc() and free() statistics
| dt_heapmon_check()	check heap integrity
|
| dt_heapmon_init() starts the tracking of malloc() and free().
| dt_heapmon_uninit() discontinues tracking of malloc() and free().
| At any time,
| dt_heapmon_report() can be called to produce a printed report
| of the current state of the heap.
| Also at any time, a call to
| dt_heapmon_check() will check the current heap integrity.
| 
| Routines from several other Function Groups participate in heap monitoring.
|_Aside Other Function Groups cooperate.
| dtos_malloc(), dtos_free() and their friends call the tracking functions 
| which maintain the heap monitor table.
| The big memory allocator dtmem_alloc()
| calls dt_heapmon_report() at the point of failure
| when it can't get enough memory for a direct access buffer.
| dt_assert_memclean() checks to make sure that there are no
| outstanding heap allocations
| and prints an error message if this is not true.
|
| This Function Group has several choices of implementation.
|_Aside You choose the implementation.
| The choice must be made at compile time.
| The choices are mutually exclusive.
| 
| 1. 	no heap monitoring
| 2. 	Dtack-developed implementation
| 3.	MemCheck by StratosWare (real mode DOS only)
|
| Disabled heap monitoring is accomplished either by excluding
| the code with a compile-time variable,
| or by not calling dt_heapmon_init() from your program.
| This means you will have the fastest code but the least amount
| of diagnostic information.
| Dtack does not recommend this alternative.
|_Aside Disabling heap monitoring not recommended.
| Although heap checking adds execution time and overhead,
| it only takes place at the points of allocation and freeing.
| The number of allocation calls in a number-crunching
| application is usually small and they are not usually performed
| within time-critical sections of the program anyway.
| The diagnostic benefits far outweigh the execution costs.
| 
| The Dtack-developed implementation is done by code within
|_Aside Home grown implementation.
| the :heap: Function Group whose API is not documented.
| The heap checking is rudimentary and slower than with a dedicated package.
| It does not do overrun checking.
| The implementation depends on all memory allocation requests being routed
| through the :os: Function Group routines dtos_malloc(),
| dtos_free() and their friends.
| However, it is available on all platforms.
|
| MemCheck by StratosWare Corp. 
|_Aside Commercial implementation.
| is a professional, commercial product costing about $150.
| While the product is available for real-mode DOS, protected-mode DOS,
|_aside Real mode DOS only.
| and Microsoft Windows, Dtack only uses it under real-mode DOS.
| You enable calls to the MemCheck API by setting a compile-time variable.
| The product must be purchased directly from StratosWare
| before being compiled with the Dtack libraries.
|
|!The :leave: Function Group
| This Function Group consists of just one function.
| 
| dt_leave()	free environment resources
|
| This function frees various resources allocated during
|_aside Frees program environment resources.
| environment setup by the :param: and :enter: Function Groups.
| It is a convenient epilogue function to run near the end of your program.
|
| Please refer to
|_hyper section, The :enter: Function Group
|
| For review, here is a common program template:
|_aside Common startup sequence.
| 
|:  dtparam_t param;					// keyword parameter descriptions
|:  dt_enter_arg_t arg[4];
|:  dt_ctl_t *ctl = &param.ctl;			// for short
|:  dt_heapmon_init(ctl);				// begin heap monitoring
|:  dtparam_init(&param);				// initialize structure
|:  dtparam_set(&param, flag, ...);		// specify parameters wanted
|:  dt_enter_arg(ctl, arg, ...);		// specify arguments wanted
|:  dt_enter_parse(argc, argv,			// parse command line
|:    progname, usage, &param, 
|:    checkarg, checkfunc)
|:
|:  ...   program does its thing    ...
|:  ... using param->xxx parameters ...
|:  ...   and arg[i].val arguments  ...
|:
|:  dt_leave(&param);					// release environment resources
|:  dt_heapmon_uninit(ctl)				// stop heap monitoring
|
|!The :say: Function Group
|_index console output,, central function
| This Function Group centralizes console output handling for all
|_aside Console output central.
| Dtack Imaging Software routines.
| The functions involved are:
| 
| dt_say()				output a console message
| dt_say_va()			output a console message from :va_list: structure
| 
| All Dtack Imaging Software functions call dt_say() when they
| want to say something which is for the human operator's attention.
|_aside Not redirected.
| This type of message is sent by the default yield function, dt_yield(),
| for example.
| See
|_hyper section, The :yield: Function Group
| 
| dt_say_va() does all the work given a :va_list: representation
| of the variable argument list.
| dt_say_va() formats the message by
|_Aside Formats like sprintf().
| replacing substitution substrings in the format string
| with values from the variable argument list.
| This process will be familiar to you since sprintf() does exactly
| the same thing.
|
| The :say: Function Group offers two levels of customization.
|_aside You can customize the console output handling.
| First,
| you can write your own console output handler which formats and outputs
| the console messages.
| Second, you can let dt_say() format the message,
| then call a function you specify to actually output the message 
| given as a sequence of strings.
|
|!The :yield: Function Group
|_index timeslice,, yielding
| This Function Group provides a means by which a program
| can express what kind of timeslice yielding it is willing to do.
|
| Timeslice yielding is only a serious issue on operating systems
|_aside Few operating systems really need it.
| which are multi-tasked but not preemptively so.
| this includes operating systems such as Microsoft Windows 3.1
| and some releases of VxWorks.
| DOS is not in this category because it is not multi-tasked.
| Unix and its derivatives are not in this category either because,
| although multi-tasked,
| processes can be preempted by other processes.
| 
| Even if timeslice yielding is not necessary for the proper functioning
|_Aside Everyone can enjoy this function.
| of the operating system,
| this Function Group can be useful.
| By periodically calling a yield function,
| a long-running number crunching program can
| keep the human operator informed of its health by producing
| a visual indication that it is alive.
| As another example,
| a program doing a long-winded timing operation
| can poll for keystrokes and possibly quit early if any are found.
| 
| The scheme works like this:
| the program stores a yield control word
| and the address of a yield function
| in the program environment, ~ctl~.
| Using the hints yield control word,
| the low level number crunching functions will call the
|_aside Low level must do this voluntarily.
| provided yield function more often or less often.
| The yield function may take whatever action it wants,
| such as printing a message, updating a dialog, or polling the keyboard.
| It finishes by returning a code to the caller which
| can have one of three values:
| continue, stop, or error.
| 
| This Function Group consists of:
| 
| dt_yield()			default yield function
| dt_yield_parse()		create yield control flags from string
|
| dt_yield() is the default yield function.
|_aside Default yield function.
| It is not called unless its address is put into ~ctl->yield~.
| It calls an operating-system timeslice yielding
| function if there is one.
| Any open interactive consoles in the program environment are updated
| with the formatted message.
| Interactive consoles are discussed in
|_hyper document, dtdoclist(dtinter, title)
| If there are no open consoles,
| then depending on the yield control word
| either single dot, a twirling baton, or the formatted message
| is printed on the console.
| The formatted message is prepared from a format string and
| a variable argument list containing
|_aside Message is given like for sprintf().
| values to be substituted exactly like the familiar sprintf().
| It will normally contain some information like
| "percent complete", or "number of lines processed".
|
| Under certain circumstances, a yield function
|_Aside Interactive stopping of the program.
| may sense that the human operator desires to stop the current operation.
| This could be in the form of a keystroke or mouse click.
| In these case, the yield function should return :DT_RC_STOP:.
| The convention is that when a called routine returns :DT_RC_STOP:,
| the caller cleans up then returns the same value to its caller.
| In this way, the desire to stop is bubbled up the calling chain.
| At some level, the stop code is handled by returning control to the
| interactive shell, dialog, or window.
|
| dt_yield_parse() is merely a convenience function for taking
| a string and setting a yield control word based on it.
| This function is called by dt_enter_parse() when a
| :-yield: keyword is found on the command line.
| Your program is free to set the yield control word directly if desired.
| 
| The yield control word currently contains the following bits:
| 
| :DT_YIELD_FLAG_OFF:		yield function never called
| :DT_YIELD_FLAG_LOW:		yield function called at 0%, 50% and 100%
| :DT_YIELD_FLAG_NORMAL:	yield function called at 0% and every 20% up to 100%
| :DT_YIELD_FLAG_HIGH:		yield function called at 0% and every 5% up to 100%
| :DT_YIELD_FLAG_DOT:		display dot on console
| :DT_YIELD_FLAG_TWIRL:		display twirling baton on console
| :DT_YIELD_FLAG_MESSAGE:	display formatted message on console
|
| It is the caller's responsibility to make the decision about when to call
|_aside Caller makes yield decision.
| ~ctl->yield~.
| Once called, ~ctl->yield~ always yields.
| The philosophy here is that function calls must be avoided
| from within highly optimized number crunching code.
| The decision of when to yield must be designed into the
| number crunching algorithm.
| There are to factors that contribute to the decision of whether to yield:
| 1) is it enabled? and 2) is it time?
| 
| The first factor is: is yielding enabled?
|_Aside Is it enabled?
| Yielding is easy to shut off.
| The yield function should not be called if:
|
| :#ifndef DTCONFIG_YIELD:					yield support not compiled in
| :ctl == NULL:								no ctl structure
| :ctl->yield == NULL:						no yield function defined
| :ctl->yield_flags == 0:					no yield flags defined
| :ctl->yield_flags & DT_YIELD_FLAG_OFF:	off bit set in yield flags
| 
| The second factor in choosing whether to call ~ctl->yield~
|_Aside Is it time?
| is: is it time to yield?
| To make this decision,
| the number crunching code must take into account
| the "often-ness" hints provided in the yield control word
| and its own internal loop structure.
|
| To aid in modularizing the decision in the source code,
|_Aside DT_YIELD() macros.
| several DT_YIELD() macros are available in :dtack/base.h:.
| They check if yielding is enabled and if it is time to yield
| they actually call ~ctl->yield~ for you.
| 
|dtinclude(formats.dx)
|
|!Example dtenv1.c - Debug Output
|_index dbg Function Group, :dbg: Function Group, example of
|_index dt_dbg(),, example of
|_index dt_dbg_parse(),, example of
|_index dt_dbg_trace(),, example of
|:// Example Program dtenv1
|:// Illustrates debug output
|:// Program takes no command line arguments.  
|:// Prints out two simple messages like:
|://   dtenv1: main: int 3, long 0x12345678, howdy
|://   dtenv1: main: at dtenv1.c@23 int 99, dbl 1.234, howdy again
|://   dtenv1: main: this message does appear
|:
|:#include <dtack/base.h>
|:
|:int main(void)
|:{
|:  dt_ctl_t ctl;
|:  memset(&ctl, 0, sizeof(ctl));		// clear ctl structure
|:  ctl.progname = "dtenv1";			// set program name for messages
|:
|:  dt_dbg(&ctl, "main",				// output debug message from main
|_aside Simple debug.
|:    DT_DBG_MASK_ALWAYS,				// don't ever filter this one out
|:    "int %d, long 0x%08lx, %s",		// the format string
|:    3, (void *)0x12345678L, "howdy");
|:
|:										// ..............................
|:  ctl.dbg_mask = DT_DBG_MASK_TRACE;	// enable TRACE class
|_aside Enable TRACE debug.
|:
|:  dt_dbg_trace(&ctl, "main",			// output trace debug message
|_Aside Do TRACE debug.
|:    __FILE__, __LINE__,				// from where in main
|:    "int %d, dbl %g, %s",				// the format string
|:    99, 1.234, "howdy again");
|:
|:										// ..............................
|:  dt_dbg(&ctl, "main",				// output filtered message 
|_aside Disappearing debug.
|:    DT_DBG_MASK_PAGE,					// this class is not enabled
|:    "this message does not appear");
|:
|:  dt_dbg_parse(&ctl, "page",			// parse the "page" string
|_aside Parse a debug string.
|:    &ctl.dbg_mask, NULL, 0);			// put straight into ctl
|:
|:  dt_dbg(&ctl, "main",				// try it now
|_aside Enabled debug.
|:    DT_DBG_MASK_PAGE,					// this class is now enabled
|:    "this message does appear");
|:
|:  return 0;
|:}
|
|!Example dtenv2.c - Common Program Template
|_index enter Function Group, :enter: Function Group, example of
|_index dt_enter_heapmon(),, example of
|_index dt_enter_arg(),, example of
|_index dt_enter_parse(),, example of
|:// Example Program dtenv2
|:// Illustrates a common program template
|:// Program takes one optional parameter and one optional argument.
|:// command line        result
|:// ""                  dtenv2: color "red", arg ""
|:// "-color blue"       dtenv2: color "blue", arg ""
|:// "-color blue yyy"   dtenv2: color "blue", arg "yyy"
|:// "-color blue yyy"   dtenv2: color "blue", arg "yyy"
|:// "xxx"               dtenv2: color "red", arg "xxx"
|:// Error checking left out for clarity.
|:
|:#include <dtack/base.h>
|:
|:int main(
|:  int argc,
|:  char *argv[])
|:{
|:  dtparam_t param;					// space for param structure
|:  dt_ctl_t *ctl = &param.ctl;			// for short
|:  dt_enter_arg_t arg[1+1];			// space for one arg plus sentinel
|:  char myarg[80];						// space for positional argument
|:
|:  memset(&param, 0, sizeof(param));	// clear param structure
|:  dt_heapmon_init(ctl);				// commence heap monitoring
|_aside Recommended.
|:
|:  dtparam_init(&param);				// initialize param structure
|:
|:  dtparam_set(&param, 0, 	 	        // set default for params we want
|_Aside Describe keyword parameter.
|:    &param.color, NULL, NULL, "red",	// 4-tuple for "color"
|:    NULL);							// sentinel
|:
|:  dt_enter_arg(ctl, arg,				// set up positional argument
|_Aside Describe argument.
|:    "myarg description", NULL, 
|:    myarg, sizeof(myarg),
|:    NULL);
|:
|:  dt_enter_parse(argc, argv,			// parse command line
|_Aside Do parsing.
|:    "dtenv3", NULL, &param, arg, 
|:    NULL, NULL);						// no custom checking
|:
|:  printf("color \"%s\","				// print what we got
|_aside Print result.
|:    " arg \"%s\"\n",		
|:    param.color, arg[0].val);
|:
|:  dt_leave(&param);					// free resources
|:
|:  dt_heapmon_uninit(ctl, NULL);		// quit heap monitoring
|:
|:  return 0;
|:}
|
|!Example dtenv3.c - Yielding
|_index err Function Group, :yield: Function Group, example of
|:// Example Program dtenv3
|:// Illustrates yielding
|:// Program takes one optional argument: the yield string
|:// argument           output
|:// ""                 no output for five seconds
|:// "message"          11 messages like "dtenv3: 10% done"
|:// "twirl"            twirling baton for five seconds
|:// "dot"              11 dots
|:
|:#include <dtack/base.h>
|:#include <dtack/os.h>
|:
|:int
|:main(
|:  int argc,
|:  char *argv[])
|:{
|:  dt_ctl_t ctl;
|:  char message[80] = {0};
|:  int i;
|:
|:  memset(&ctl, 0, sizeof(ctl));		// clear ctl structure
|:  ctl.progname = "dtenv3";			// set program name for messages
|:
|:  if (argc > 1)						// command line has something?
|:    dt_yield_parse(&ctl, argv[1],		// presume it's the yield hint
|:      &ctl.yield_flags,
|:      message, sizeof(message));
|:
|:  if (strlen(message))				// yield hint parsing failed?
|:    dt_err(&ctl, "dtenv3", "%s",
|:      message);
|:  else								// yield hint ok?
|:    for (i=0; i<=100; i+=10)
|:    {
|:      dt_yield(&ctl, "%d%% done", i);	// yield timeslice
|:      if (i < 100)					// not at last loop yet?
|:        dtos_delay(&ctl, 500);		// delay a bit
|:    }
|:
|:  return 0;
|:}
|
|!Example dtenv4.c - Error Handling
|_index err Function Group, :err: Function Group, example of
|:// Example Program dtenv4
|:// Illustrates error handling
|:// Program takes no parameters or arguments.
|:// Outputs a line like:
|://   dtenv4: this message output through error mechanism, i=99
|:
|:#include <dtack/base.h>
|:
|:dt_rc_e
|:myerr(								// custom error handler
|:  dt_ctl_t *ctl,
|:  const char *caller,
|:  const char *format,
|:  va_list arg)
|:{
|:  printf("%s: ", caller);				// print caller ID
|:  vprintf(format, arg);				// just print message
|:  printf("\n");						// there is no newline in message
|:  return DT_RC_BAD;					// by convention
|:}
|:										// ..............................
|:int main()
|:{
|:  dt_ctl_t ctl;
|:  memset(&ctl, 0, sizeof(ctl));		// clear ctl structure
|:
|:  ctl.err = myerr;					// install custom function
|:
|:  dt_err(&ctl, "dtenv4",				// generate an original error
|_aside Generate error.
|:    "this message output through"
|:    " error mechanism, i=%d", 99);
|:
|:  return 0;
|:}
| 
| END
 *..........................................................................*/

