/*..........................................................................
| TITLE dthist()
|dxinclude(liblink1.dx)
|
|!:hist: Function Group Introduction
| The :hist: Function Group does basic histogram manipulation.
| 
| This Function Group is made up of:
| dthist_add_values()	accumulate frequencies for given array of values
| dthist_alloc()		allocate space for histogram frequency counts
| dthist_clear()		set all histogram frequencies to zero
| dthist_bin_to_value()	return the data value range associated 
|						with the given bin
| dthist_free()			free space allocated by dthist_alloc()
| dthist_value_to_bin()	return the bin to use for the given data value
| dthist_scale()		scale frequency counts
| 
| In addition, the following macros can improve performance
| at the cost of increased code memory size and reduced error checking:
| 
| DTHIST_BIN_TO_MINVALUE()	return floor value of given bin
| DTHIST_BIN_TO_MAXVALUE()	return ceiling value of given bin
| DTHIST_VALUE_TO_BIN()		return the bin to use for the given data value
| 
| A histogram should be allocated with the dthist_alloc() function
|_aside What the functions do.
| and freed with the dthist_free() function.
| The frequency counts are cleared by dthist_clear()
| before accumulating data values with dthist_add_values().
| The frequency counts can be scaled to some desired height by dthist_scale().
| If you need to perform direct operations on a bin,
| you can determine the bin for any data value using dthist_value_to_bin().
| Conversely, if you want to know what the data limits for a bin are,
| call dthist_bin_to_value().
| 
| As one of the arguments to dthist_alloc(),
|_aside Space allocated.
| you give the number of bins desired in the ~width~ argument.
| An array of :unsigned long: values of this length is allocated 
| with malloc().
| You must have enough memory to hold at least ~width~ 4-byte longwords
| for the bins in the frequency array.
| 
| A histogram is represented with the :dthist_t: data structure
|_aside :dthist_t: structure.
|_index dthist_t structure, :dthist_t: structure
|_index structure,, :dthist_t:
| which has at least the following members:
| :dthist_bin_t width:	number of bins
| :double minval:		floor value of left-most bin
| :double maxval:		ceiling value of right-most bin
| :double dscale:		linear scaling to convert data to and from bin
| :dthist_freq_t *freq:	array of frequencies (counts), one for each bin
| 
|_index dthist_freq_t data type, :dthist_freq_t: data type
|_index data type,, :dthist_freq_t:
|_index dthist_bin_t data type, :dthist_bin_t: data type
|_index data type,, :dthist_bin_t:
| The frequency count values are of data type :dthist_freq_t:,
| which is :unsigned long: in the current implementation.
| The bin indices are of data type :dthist_bin_t:,
| which is :unsigned int: in the current implementation.
| 
| The computation to find a bin for a data value is:
| 
|:  dthist_bin_t bin = (data - hist->minval) * hist->dscale.
| 
| As you can see, if ~hist->dscale~ is 1.0 and ~hist->minval~ is 0.0,
|_aside Direct mapped.
| then the data can be directly mapped into a bin.
| This case is processed more efficiently by dthist_add_values().
| For a direct-mapped histogram,
| the data range should be from 0.0 to a maximum equivalent to
| the number of bins.
|
| If the histogram width is less than the data range, then
|_index binning,, histogram
|_index histogram,, binning
| ~hist->dscale~ will be less than 1.0,
| and data will suffer implicit precision loss as it is binned.
| This precision loss is caused by scaling which
|_aside Data precision loss.
|_index precision loss,, histogram
|_index histogram,, precision loss
| is the only practical way to make a histogram of a dataset
| with a wide range of values.
| Without scaling, there would not be enough computer memory
| to keep a different bin for each different data value.
| 
| A histogram bin consists of a minimum value (floor),
|_Aside Data within extremes.
| a maximum value (ceiling), and a frequency count.
| When data is being added to the histogram by function dthist_add_values(),
| each data value falling within the histogram limits
| simply increments its assigned bin's frequency count by 1.
| 
| Data values which fall outside the histogram limits are treated differently.
|_aside Data beyond extremes.
| A data value below the histogram minimum is added to the lowest bin.
| Likewise, data values falling at or above the maximum value are added
| to the highest bin.
| [fig:hist1] illustrates this.
| In this way, the sum of the histogram frequency counts
| will equal the number of data items processed.
|_figure picture, hist1, Histogram Binning
|
|!Example dthist1.c - Direct Histogram Access
|_index hist Function Group, :hist: Function Group, example of
| The following example allocates a direct-mapped histogram
| prepared to handle unsigned character data.
| 
|:// Example Program dthist1                                                  
|:// Illustrates direct histogram access.
|:// Program takes no command line arguments.									
|:// Program prints out 4 histogram bins like:
|://   dthist1: bin   2 count is   40
|://   dthist1: bin  11 count is   20
|://   dthist1: bin 120 count is   30
|://   dthist1: bin 255 count is   10
|:// Error checking left out for clarity.
|:
|:#include <dtack/base.h>
|:#include <dtack/os.h>
|:
|:int
|:main(void)
|:{
|:# define N 10
|:  static unsigned char data[N] = {	// simple data set 					
|:    11, 2, 255, 2, 2,
|:    120, 2, 11, 120, 120};
|:  dthist_t hist;
|:  dthist_freq2_t *freq;
|:  dthist_bin_t i;
|:
|:  dthist_alloc(NULL, &hist, 256,		// allocate direct histogram
|_aside Allocate.
|:    0, 256);
|:  dthist_clear(NULL, &hist);			// clear histogram bins
|_Aside Clear.
|:	
|:  freq = (dthist_freq2_t *)hist.freq; // reference the freq array
|:
|:	for (i=0; i<N; i++)					// loop for each data value
|:	{
|:	  dthist_bin_t bin;
|:	  DTHIST_VALUE_TO_BIN(DT_N, NULL,	// determine which bin
|:      &hist, data[i], &bin);
|_Aside Compute.
|:	  freq[bin] += 10;		    		// increment bin by 10
|:	}
|:
|:  for (i=0; i<hist.width; i++)		// loop for each bin				
|:  {
|:    if (freq[i] != 0)
|:      printf("dthist1:"				// print bin information
|_Aside Print.
|:        " bin %3u count is %3u\n",
|:      (unsigned int)i, 
|:      (unsigned int)freq[i]);
|:  }
|:	
|:  dthist_free(NULL, &hist);			// free histogram 					
|:
|:  return 0;
|:}
| 
|!Example dthist2.c - Histogram Binning
|_index hist Function Group, :hist: Function Group, example of
| The following example generates 1000 double precision data points
| from a gaussian random distribution.
| The generated data could theoretically have any real value,
| but with this random generator and seed, it
| actually ranges from about -1.8 to 1.6.
| The program then allocates a histogram of 10 bins prepared to
| handle data in the range -1.0 up to 1.0.
| When adding the data to the histogram,
| data points on the tails of the curve outside this range
| get stuffed into the lowest and highest bins respectively.
| Binning will occur by multiplying the data values by 10 and offsetting.
| Finally, a loop prints the bins and a bar illustrating the relative
| frequency counts.
|
|:// Example Program dthist2                                                  
|:// Illustrates histogram binning.                                            
|:// Program takes no command line arguments.									
|:// Program prints out 10 histogram bins and a cheap bar chart like:			
|://   dthist2: bin 0 range [-1.0:-0.8] scaled count   6 ======	
|://   dthist2: bin 1 range [-0.8:-0.6] scaled count   5 =====			
|:// and so on.																
|:// Error checking left out for clarity.                                     
|:
|:#include <dtack/base.h>
|:#include <dtack/os.h>
|:
|:int
|:main(void)
|:{
|:# define N 1000						// how many data values to generate 
|:  double *data;
|:  dt1d_ran_t ran;
|:  dthist_t hist;
|:  dthist_freq2_t *freq;
|:  char bar[20];
|:  dthist_bin_t i;
|:
|:  dtos_malloc(NULL,					// get space for data				
|:    (void **)&data, 
|:    N * sizeof(*data));
|:
|:  dt1d_ran_gauss_init(&ran, 0);		// init random numbers				
|:  dt1d_random_gauss_double(&ran,		// compute random numbers
|_aside Generate random data.
|:    data, N);
|:  dt1d_mult(							// tighten the curve 				
|:    DTNTYPE_F2,
|:    data, N, 0.5,
|:    data, N, 0.0, 0.0,
|:    data, N);
|:
|:  dthist_alloc(NULL, &hist, 10,		// allocate 10-bin histogram
|_Aside Small histogram.
|:    -1.0, 1.0);						// histogram data range				
|:  dthist_clear(NULL, &hist);			// clear histogram bins				
|:  dthist_add_values(NULL, &hist,		// add data to histogram
|_Aside Do binning.
|:    data, 0, N, DT_NTYPE_F2);
|:
|:  dthist_scale(NULL, &hist, 			// scale freq counts to bar size	
|:    sizeof(bar)-1);
|:	
|:  freq = (dthist_freq2_t *)hist.freq; // reference the freq array
|:
|:  for (i=0; i<hist.width; i++)		// loop for each bin				
|:  {
|:    double floor, ceiling;
|:    dthist_bin_to_value(NULL,			// get bin edges
|_Aside Bin bounds.
|:      &hist, i, &floor, &ceiling);
|:
|:    memset(bar, '=', sizeof(bar));	// fill the bar 					
|:    bar[(int)freq[i]] = '\0';     	// chop bar off at its height		
|:
|:    printf("dthist2:"					// print bin information
|_Aside Print results.
|:      " bin %u range [%4.1f:%4.1f]"
|:      " scaled count %3u %s\n",
|:      (unsigned int)i, floor, ceiling,
|:      (unsigned int)freq[i], bar);
|:  }
|:
|:  dthist_free(NULL, &hist);			// free histogram 					
|:
|:  dtos_free(NULL, data);				// free data 						
|:
|:  return 0;
|:}
| 
| END
 *..........................................................................*/
