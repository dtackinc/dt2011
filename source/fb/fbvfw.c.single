/*..........................................................................
| NAME
| Introduction - intro
|
| DESCRIPTION
| As yet undocumented.
| 
| RETURN VALUES
| All functions Return DTOS_RANWELL on success.  
| Any other return value indicates failure.
| 
| ERRORS
| As yet undocumented.
| 
| END
 *..........................................................................*/

#include <dt.h>
DT_RCSID("source/fb $RCSfile: fbvfw.c,v $ $Revision: 1.7 $");
#include <dtlut8.h>
#include <dt_color.h>
#include <dtfb.h>
#include <dtos.h>
#include <dtstr.h>
#include <dtprj.h>
#include <dtyield.h>

#include <dtmsw.h>

#define DESC "vfw capture card"

extern dtfb_init_f dtfb_vfw_init;

#if DTPRJ_VFW == DT_1

typedef struct {
  dt_ctl_t *ctl;
  char *buffer;
  char *spec;
  char *board_type;
  BITMAPINFOHEADER *header;
  HWND hwnd;
  long bufsize;
  int xe;
  int ye;
  int capturing;
  int hide;
  dt_rc_e rc;
  char action[32];
} dtfb_vfw_priv_t;

static dtfb_vfw_priv_t global_priv;

#define ACTION(PRIV, S) \
  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS, "doing %s", (S)); \
  strcpy((PRIV)->action, (S))

#define RESULT(PRIV) \
  if ((PRIV)->rc != DT_RC_GOOD) \
  { \
    rc = dt_err(ctl, F, "%s failed", \
      (PRIV)->action); \
    goto cleanup; \
  }  

#ifndef DTDEPEND
#  define NOCOMPMAN						/* dont include COMPMAN				*/
#  define NODRAWDIB						/* dont include DRAWDIB				*/
#  define NOAVIFMT						/* dont include AVI file format		*/
#  define NOMMREG						/* dont include MMREG				*/
#  define NOAVIFILE						/* dont include AVIFile interface	*/
#  define NOMCIWND						/* dont include AVIWnd class		*/
#  define NOMSACM						/* dont include ACM stuff			*/
#  include <vfw.h>
#endif

extern
dt_rc_e
DTCONFIG_API1
dtfb_util_bgrcopy(
  dt_ctl_t *ctl,
  unsigned char *p,
  unsigned char *d,
  const int xe,
  const int ye);

/*..........................................................................
 *..........................................................................*/

static
LRESULT FAR PASCAL 
dtfb_vfw_error(							/* error callback 					*/
  HWND hwnd, 
  int n, 
  LPCSTR s)
{
  dtfb_vfw_priv_t *priv =
    (dtfb_vfw_priv_t *)
      capGetUserData(hwnd);
  dt_ctl_t *ctl;

  if (priv == NULL)						/* safety check 					*/
  {
    MessageBox((HWND)NULL, "NULL priv", 
      "Tableau Error", MB_OK);
	return (LRESULT)TRUE;
  }

  ctl = priv->ctl;
  if (ctl == NULL)						/* safety check 					*/
  {
    MessageBox((HWND)NULL, "NULL ctl", 
      "Tableau Error", MB_OK);
	return (LRESULT)TRUE;
  }

  priv->rc = dt_err(ctl, 
    priv->action,
    "result %d: \"%s\"", n, s);

  if (n == 0)
    priv->rc = DT_RC_GOOD;
  return (LRESULT)TRUE;
}

/*..........................................................................
 *..........................................................................*/

static
LRESULT FAR PASCAL 
dtfb_vfw_frame(							/* frame callback 					*/
  HWND hwnd, 
  LPVIDEOHDR video)
{
  DT_F("dtfb_vfw_frame");
  dtfb_vfw_priv_t *priv =
    (dtfb_vfw_priv_t *)
      capGetUserData(hwnd);
  dt_ctl_t *ctl;
  dt_rc_e rc = DT_RC_GOOD;

  if (priv == NULL)						/* safety check 					*/
  {
    MessageBox((HWND)NULL, "NULL priv", 
      "Tableau Frame", MB_OK);
	return (LRESULT)TRUE;
  }

  ctl = priv->ctl;
  if (ctl == NULL)						/* safety check 					*/
  {
    MessageBox((HWND)NULL, "NULL ctl", 
      "Tableau Frame", MB_OK);
	return (LRESULT)TRUE;
  }

#ifdef NONO
  if (priv->buffer != NULL &&			/* we have a buffer? 				*/
	  priv->bufsize <					/* buffer we have is too small? 	*/
	  video->dwBufferLength)
  {
	DT_G(dtos_free2,(ctl,				/* free old buffer 					*/
      &priv->buffer
      F, "buffer"));
	if (rc != DT_RC_GOOD)
	  goto cleanup;
	priv->buffer = NULL;
	priv->bufsize = 0;
  }

  if (priv->buffer == NULL)				/* we don't have a buffer? 			*/
  {
	DT_G(dtos_malloc2,(ctl,				/* allocate buffer */
      &priv->buffer,
	  video->dwBufferLength,
      F, "buffer"));
	if (rc != DT_RC_GOOD)
	  goto cleanup;
	priv->bufsize =
	  video->dwBufferLength;
  }
#endif

  if (priv->buffer == NULL ||			/* no buffer? 						*/
	  priv->bufsize !=					/* buffer size is unexpected?		*/
	  video->dwBytesUsed)
  {
	rc = dt_err(ctl, F,
      "video size %ld but expected %ld",
	  video->dwBytesUsed,
	  priv->bufsize);
	goto cleanup;
  }

  dtfb_util_bgrcopy(ctl,
    video->lpData,
    priv->buffer,
    priv->xe, priv->ye);

cleanup:
  priv->capturing = 0;					/* we are no longer capturing 		*/
  priv->rc = rc;
  return (LRESULT)TRUE;
}

/*..........................................................................
 * query driver and print interesting things
 *..........................................................................*/

static
dt_rc_e
dtfb_vfw_report(
  dt_ctl_t *ctl,
  dtfb_t *fb)
{
  DT_F("dtfb_vfw_report");
  dtfb_vfw_priv_t *priv =
    fb->priv;
  CAPDRIVERCAPS caps;
  CAPSTATUS capstatus;
  CAPTUREPARMS captureparms;
  LRESULT result;
  dt_rc_e rc = DT_RC_GOOD;

  ACTION(priv, "capDriverGetCaps");
  result = capDriverGetCaps(priv->hwnd, 
    &caps, sizeof(caps));
  if (result != TRUE)
    return dt_err(ctl, F, 
     "capDriverGetCaps failed");
  RESULT(priv);

#define REPORT(S) \
  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS, \
    "  capdrivercaps.%s %s", #S, caps.S? "true": "false");
  REPORT(fHasOverlay);
  REPORT(fHasDlgVideoSource);
  REPORT(fHasDlgVideoFormat);
  REPORT(fHasDlgVideoDisplay);
  REPORT(fCaptureInitialized);
  REPORT(fDriverSuppliesPalettes);
#undef REPORT


#define REPORT(S) \
  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS, \
    "  bitmaphdr.%s %ld (0x%08lx)", #S, \
    (long)priv->header->S, \
    (long)priv->header->S);
  REPORT(biSize);
  REPORT(biCompression);
  REPORT(biWidth);
  REPORT(biHeight);
  REPORT(biPlanes);
  REPORT(biBitCount);
  REPORT(biSizeImage);
#undef REPORT

  ACTION(priv, "capGetStatus");
  capGetStatus(priv->hwnd, 
    &capstatus, sizeof(capstatus));
  RESULT(priv);

#define REPORT(S) \
  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS, \
    "  capstatus.%s %ld (0x%08lx)", #S, \
    (long)capstatus.S, \
    (long)capstatus.S)
  REPORT(uiImageWidth);
  REPORT(uiImageHeight);
  REPORT(fLiveWindow);
  REPORT(fOverlayWindow);
  REPORT(dwCurrentVideoFrame);
  REPORT(dwCurrentTimeElapsedMS);
  REPORT(fCapturingNow);
  REPORT(dwReturn);
#undef REPORT

  ACTION(priv, "capCaptureGetSetup");
  capCaptureGetSetup(priv->hwnd, 
    &captureparms, sizeof(captureparms));
  RESULT(priv);

#define REPORT(S) \
  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS, \
    "  captureparms.%s %ld (0x%08lx)", #S, \
    (long)captureparms.S, \
    (long)captureparms.S)
  REPORT(dwRequestMicroSecPerFrame);
  REPORT(fYield);
  REPORT(wNumVideoRequested);
  REPORT(fCaptureAudio);
  REPORT(fLimitEnabled);
  REPORT(wTimeLimit);
#undef REPORT
cleanup:
  return rc;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dtfb_vfw_control(
  dt_ctl_t *ctl,
  dtfb_t *fb,
  dtfb_control_e control)
{
  DT_F("dtfb_vfw_control");

  DTCSTACK_HIGHWATER;

  switch (control)
  {
	case DTFB_CONTROL_RESET:
	break;
	case DTFB_CONTROL_SNAPSHOT:
	break;
	case DTFB_CONTROL_FREEZE:
	break;
	case DTFB_CONTROL_ACQUIRE:
	break;
	default:
      return dt_err(ctl, F,
        "invalid control code 0x%04x",
        control);
  }
  return DT_RC_GOOD;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dtfb_vfw_getblock(
  dt_ctl_t *ctl,
  dtfb_t *fb,
  void *data,
  int x0,
  int y0,
  int xe,
  int ye)
{
  DT_F("dtfb_vfw_getblock");
  dtfb_vfw_priv_t *priv =
    fb->priv;
  dtos_time_t beg, end;
  int n = 0;
  dt_rc_e rc;
  
  if (x0 != 0 || y0 != 0)				/* the whole pie only			    */
    return dt_err(ctl, F,
      "x0=%d or y0=%d is not 0",
      x0, y0);

  priv->ctl = ctl;
  priv->capturing = 1;					/* ready for capture 				*/
  priv->buffer = data;
  priv->bufsize = xe * ye * 3;
  priv->xe = fb->xe;
  priv->ye = fb->ye;
  ACTION(priv, "capGrabFrameNoStop");
  DT_C(dtos_time,(ctl, &beg));
  capGrabFrameNoStop(priv->hwnd);		/* grab one frame 					*/
  DT_C(dtos_time,(ctl, &end));
  while (priv->capturing)				/* wait for capturing to end 		*/
  {
	n++;
	DT_C(dtos_delay,(ctl, 100));
  }
  RESULT(priv);
  dt_dbg(ctl, F, DT_DBG_MASK_ASYNC,
    "grab took %0.3f seconds,"
    " then waited %ld milliseconds",
    end.wall-beg.wall, (long)n * 100L);
cleanup:
  priv->capturing = 0;					/* not capturing any more 			*/
  priv->buffer = NULL;					/* not our buffer 					*/
  priv->bufsize = 0;
  return rc;
}

/*..........................................................................
 *..........................................................................*/

static
dt_rc_e
dtfb_vfw_uninit(						/* release resources 				*/
  dt_ctl_t *ctl,
  dtfb_t *fb)
{
  DT_F("dtfb_vfw_uninit");
  dtfb_vfw_priv_t *priv =
    fb->priv;
  dt_rc_e rc = DT_RC_GOOD;

  DTCSTACK_HIGHWATER;

  if (priv != NULL &&
	  priv->header != NULL)
    DT_I(dtos_free2,(ctl, 
      priv->header,
      F, "bitmapinfo"));

  if (priv != NULL &&
	  priv->hwnd != NULL)
  {
	ACTION(priv, "capDriverDisconnect");
    capDriverDisconnect(priv->hwnd);
  }
	
  if (priv != NULL &&
	  priv->buffer != NULL)
    DT_I(dtos_free2,(ctl, priv->buffer,
      F, "buffer"));

  if (priv != NULL &&
	  priv->spec != NULL)
    DT_I(dtos_free2,(ctl, priv->spec,
      F, "spec"));

  if (priv != NULL &&
	  priv != &global_priv)
    DT_I(dtos_free2,(ctl, priv,
      F, "priv"));

  return rc;
}

#endif

/*..........................................................................
 *..........................................................................*/

dt_rc_e
DTCONFIG_API1
dtfb_vfw_init(
  dt_ctl_t *ctl,
  dtfb_t *fb,
  const char *spec)
{
  DT_F("dtfb_vfw_init");
# if DTPRJ_VFW == DT_1
  dtfb_vfw_priv_t *priv = NULL;
  int ntokens;
  char *p;
  long longval;
  LRESULT result;
  BITMAPINFOHEADER h;
  int hsize;
  int i, j;
  CAPTUREPARMS captureparms;
  dt_rc_e rc;

  DTCSTACK_HIGHWATER;

  if (spec == NULL)
  {
    rc = dt_err(ctl, F,
      "NULL vfw spec");
    goto cleanup;
  }
  else
  if (strlen(spec) == 0)
  {
    rc = dt_err(ctl, F,
      "zero-length vfw spec");
    goto cleanup;
  }

  DT_C(dtos_malloc2,(ctl,				/* space for private structure	    */
    (void **)&priv,
    sizeof(dtfb_vfw_priv_t),
    F, "priv"));
  memset(priv, 0,						/* clear private structure 			*/
    sizeof(dtfb_vfw_priv_t));
  
  priv->ctl = ctl;

  DT_C(dtos_strdup,(ctl, spec,			/* get space for spec edit 			*/
    &priv->spec));

  DT_C(dtstr_tokenize,(ctl,				/* separate spec into tokens 		*/
    priv->spec,
    ',', &ntokens));
										/* ................................ */
  p = priv->spec;

  if (ntokens >= 1)
  {
    priv->board_type = p;
	p += strlen(p) + 1;
  }

  if (ntokens >= 2)						/* width 							*/
  {
    DT_C(dtstr_to_long,(ctl,
      p, &longval));
	fb->xe = longval;
	p += strlen(p) + 1;
  }
  else
    fb->xe = 352;

  if (ntokens >= 3)						/* height 							*/
  {
    DT_C(dtstr_to_long,(ctl,
      p, &longval));
	fb->ye = longval;
	p += strlen(p) + 1;
  }
  else
    fb->ye = 288;

  if (ntokens >= 4)						/* flags+flags						*/
  {
    priv->hide = !!strstr(p, "hide");
  }

										/* ................................ */
  j = -1;
  for (i=0; i<10; i++)
  {
	char name[80];
	char version[80];
		 
    if (capGetDriverDescription(i,		/* get ith capture driver name 		*/
          name, sizeof(name),
          version, sizeof(version)))
	{
	  dt_dbg(ctl, F, DT_DBG_MASK_ALIMITS,
        "%d. driver name=\"%s\""
        " version=\"%s\"",
        i, name, version);
	  if (!strncmp(name, 
            priv->board_type, 
            strlen(priv->board_type)))
	    j = i;
	}
  }
  if (j == -1)
  {
	rc = dt_err(ctl, F,
      "board type \"%s\" not found",
      priv->board_type);
	goto cleanup;
  }
										/* ................................ */
  priv->hwnd = capCreateCaptureWindow(	/* create window for capture 		*/
    (LPSTR) "tableau fbvfw",
    WS_OVERLAPPED | 
    priv->hide? 0: WS_VISIBLE,
    0, 0, fb->xe, fb->ye,
    NULL, 0);

  if (priv->hwnd == NULL)
  {
	rc = dt_err(ctl, F,
      "capCreateCaptureWindow(\"%s\","
      " WS_OVERLAPPED | WS_VISIBLE,"
      "0, 0, %d, %d, NULL, 0)"
      " failed",
      "tableau fbvfw", fb->xe, fb->ye);
	goto cleanup;
  }

  ACTION(priv, "capSetUserData");
  capSetUserData(priv->hwnd, priv);

  ACTION(priv, "capSetCallbackOnError");
  capSetCallbackOnError(priv->hwnd,		/* define the error callback 		*/
    (FARPROC)dtfb_vfw_error);
  RESULT(priv);

  ACTION(priv, "capDriverConnect");
  result = capDriverConnect(			/* connect capture driver to window */
    priv->hwnd, j);
  if (result != TRUE)
  {
	rc = dt_err(ctl, F,
      "capDriverConnect(0x%08lx, %d)"
      " failed result=%ld", 
      (long)priv->hwnd, j, result);
	goto cleanup;
  }
  RESULT(priv);

  ACTION(priv, "capOverlay");
  capOverlay(priv->hwnd, priv->hide? FALSE: TRUE);
  RESULT(priv);

  ACTION(priv, "capCaptureGetSetup");
  capCaptureGetSetup(priv->hwnd, 
    &captureparms, sizeof(captureparms));
  RESULT(priv);

  captureparms.fYield = TRUE;

  ACTION(priv, "capCaptureSetSetup");
  capCaptureSetSetup(priv->hwnd, 
    &captureparms, sizeof(captureparms));
  RESULT(priv);

  ACTION(priv, "capSetCallbackOnFrame");
  capSetCallbackOnFrame(priv->hwnd,		/* define the frame callback 		*/
    (FARPROC)dtfb_vfw_frame);
  RESULT(priv);

# ifdef NONO
  memset(&h, 0, sizeof(h));
  h.biSize = sizeof(h);
  h.biCompression = BI_RGB;
  h.biWidth = fb->xe;
  h.biHeight = fb->ye;
  h.biPlanes = 1;
  h.biBitCount = 24;
  h.biSizeImage = fb->xe * fb->ye * 3;
  ACTION(priv, "capSetVideoFormat");
  capSetVideoFormat(priv->hwnd,			/* set image size and 24-bit RGB	*/
    &h, sizeof(h));
  RESULT(priv);
# endif

  ACTION(priv, "capGetVideoFormatSize");
  hsize = capGetVideoFormatSize(
    priv->hwnd);
  RESULT(priv);

  DT_C(dtos_malloc2,(ctl, 
    (void **)&priv->header, hsize,
    F, "bitmapinfo"));

  ACTION(priv, "capGetVideoFormat");
  (void)capGetVideoFormat(priv->hwnd,
    priv->header, hsize);
  RESULT(priv);

  fb->xe = priv->header->biWidth;
  fb->ye = priv->header->biHeight;

  fb->org.org  = DT_COLOR_ORG_RGB888;
  fb->rowsize  = 3 * fb->xe;			/* three bytes per pixel 			*/
  
  fb->priv     = priv;
  fb->uninit   = dtfb_vfw_uninit;
  fb->control  = dtfb_vfw_control;
  fb->getblock = dtfb_vfw_getblock;

  DT_C(dtfb_vfw_report,(ctl, fb));		/* report what we have so far 		*/

  if (priv->header->biCompression != BI_RGB ||
	  priv->header->biPlanes != 1 ||
	  priv->header->biBitCount != 24)
  {
	rc = dt_err(ctl, F,
      "invalid Compression/Planes/BitCount"
      " 0x%08lx/%d/%d"
      " expecting 0x%08lx/%d/%d",
      priv->header->biCompression, 
      priv->header->biPlanes, 
      priv->header->biBitCount,
      BI_RGB, 1, 24);
	goto cleanup;
  }

cleanup:
  if (rc != DT_RC_GOOD)
  {
	if (priv != NULL &&
		priv->header != NULL)
	  DT_I(dtos_free2,(ctl, 
        priv->header,
        F, "bitmapinfo"));
	
    if (priv != NULL &&
	    priv->hwnd != NULL)
      capDriverDisconnect(priv->hwnd);

    if (priv != NULL &&
		priv->buffer != NULL)
      DT_I(dtos_free2,(ctl, priv->buffer,
        F, "buffer"));

    if (priv != NULL &&
		priv->spec != NULL)
      DT_I(dtos_free2,(ctl, priv->spec,
        F, "spec"));

	if (priv != NULL &&
		priv != &global_priv)
	  DT_I(dtos_free2,(ctl, priv,
        F, "priv"));
  }

  return rc;
# else
  return dt_err_notlinked(ctl, F, DESC);  
# endif
}
