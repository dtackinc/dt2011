/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
  ! Copyright (C) 1998 Dtack Inc. All Rights Reserved
  ! To use this file, you must have signed a license agreement with Dtack Inc.
  ! Under no circumstances may you redistribute this file.
  ! This software is provided AS IS with no warranty expressed or implied.
  ! Dtack Inc. accepts no liability for use or misuse of this file.
  ! http://www.dtack.com  dtack@dtack.com  telephone +360.417.6700
  ! Dtack Inc, P.O. Box 3061, Port Angeles, WA USA 98362
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */




// Automatically generated from template - EDITS WILL BE LOST

// Generated by module.awk with options header

#ifndef _DC3tmodule_HEADER_
#define _DC3tmodule_HEADER_

class DC3Module_PatientRelationship : public DC3Module {
public:
	DC3Module_PatientRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PatientIdentification : public DC3Module {
	DC3Attribute *PatientName;
	DC3Attribute *PatientID;
	DC3Attribute *IssuerOfPatientID;
	DC3Attribute *OtherPatientID;
	DC3Attribute *OtherPatientName;
	DC3Attribute *PatientBirthName;
	DC3Attribute *PatientMotherBirthName;
	DC3Attribute *MedicalRecordLocator;
public:
	DC3Module_PatientIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PatientDemographic : public DC3Module {
	DC3Attribute *PatientBirthDate;
	DC3Attribute *PatientBirthTime;
	DC3Attribute *PatientSex;
	DC3Attribute *PatientSize;
	DC3Attribute *PatientWeight;
	DC3Attribute *PatientAddress;
	DC3Attribute *MilitaryRank;
	DC3Attribute *BranchOfService;
	DC3Attribute *CountryOfResidence;
	DC3Attribute *RegionOfResidence;
	DC3Attribute *PatientTelephoneNumber;
	DC3Attribute *EthnicGroup;
	DC3Attribute *PatientReligiousPreference;
	DC3Attribute *PatientComments;
public:
	DC3Module_PatientDemographic(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PatientMedical : public DC3Module {
	DC3Attribute *MedicalAlerts;
	DC3Attribute *ContrastAllergies;
	DC3Attribute *SmokingStatus;
	DC3Attribute *AdditionalPatientHistory;
	DC3Attribute *PregnancyStatus;
	DC3Attribute *LastMenstrualDate;
	DC3Attribute *SpecialNeeds;
	DC3Attribute *PatientState;
public:
	DC3Module_PatientMedical(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitRelationship : public DC3Module {
public:
	DC3Module_VisitRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitIdentification : public DC3Module {
	DC3Attribute *InstitutionName;
	DC3Attribute *InstitutionAddress;
	DC3Attribute *AdmissionID;
	DC3Attribute *IssuerOfAdmissionID;
public:
	DC3Module_VisitIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitStatus : public DC3Module {
	DC3Attribute *VisitStatusID;
	DC3Attribute *CurrentPatientLocation;
	DC3Attribute *PatientInstitutionResidence;
	DC3Attribute *VisitComments;
public:
	DC3Module_VisitStatus(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitAdmission : public DC3Module {
	DC3Attribute *ReferringPhysicianName;
	DC3Attribute *ReferringPhysicianAddress;
	DC3Attribute *ReferringPhysicianTelephoneNumber;
	DC3Attribute *AdmittingDiagnosisDescription;
	DC3Attribute *RouteOfAdmissions;
	DC3Attribute *AdmittingDate;
	DC3Attribute *AdmittingTime;
public:
	DC3Module_VisitAdmission(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitDischarge : public DC3Module {
	DC3Attribute *DischargeDate;
	DC3Attribute *DischargeTime;
	DC3Attribute *DischargeDiagnosisDescription;
public:
	DC3Module_VisitDischarge(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VisitScheduling : public DC3Module {
	DC3Attribute *ScheduledAdmissionDate;
	DC3Attribute *ScheduledAdmissionTime;
	DC3Attribute *ScheduledDischargeDate;
	DC3Attribute *ScheduledDischargeTime;
	DC3Attribute *ScheduledPatientInstitutionResidence;
public:
	DC3Module_VisitScheduling(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyRelationship : public DC3Module {
	DC3Attribute *StudyInstanceUID;
	DC3Attribute *AccessionNumber;
public:
	DC3Module_StudyRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyIdentification : public DC3Module {
	DC3Attribute *StudyID;
	DC3Attribute *StudyIDIssuer;
	DC3Attribute *OtherStudyNumbers;
public:
	DC3Module_StudyIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyClassification : public DC3Module {
	DC3Attribute *StudyStatusID;
	DC3Attribute *StudyPriorityID;
	DC3Attribute *StudyComments;
public:
	DC3Module_StudyClassification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyScheduling : public DC3Module {
	DC3Attribute *ScheduledStudyStartDate;
	DC3Attribute *ScheduledStudyStartTime;
	DC3Attribute *ScheduledStudyStopDate;
	DC3Attribute *ScheduledStudyStopTime;
	DC3Attribute *ScheduledStudyLocation;
	DC3Attribute *ScheduledStudyLocationAETitle;
	DC3Attribute *ReasonForStudy;
	DC3Attribute *RequestingPhysician;
	DC3Attribute *RequestingService;
	DC3Attribute *RequestedProcedureDescription;
	DC3Attribute *RequestedContrastAgent;
public:
	DC3Module_StudyScheduling(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyAcquisition : public DC3Module {
	DC3Attribute *StudyArrivalDate;
	DC3Attribute *StudyArrivalTime;
	DC3Attribute *StudyDate;
	DC3Attribute *StudyTime;
	DC3Attribute *StudyCompletionDate;
	DC3Attribute *StudyCompletionTime;
	DC3Attribute *StudyVerifiedDate;
	DC3Attribute *StudyVerifiedTime;
	DC3Attribute *SeriesInStudy;
	DC3Attribute *AcquisitionsInStudy;
public:
	DC3Module_StudyAcquisition(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyRead : public DC3Module {
	DC3Attribute *PhysicianReadingStudy;
	DC3Attribute *StudyReadDate;
	DC3Attribute *StudyReadTime;
public:
	DC3Module_StudyRead(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyComponent : public DC3Module {
	DC3Attribute *StudyID;
	DC3Attribute *StudyInstanceUID;
public:
	DC3Module_StudyComponent(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyComponentRelationship : public DC3Module {
public:
	DC3Module_StudyComponentRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyComponentAcquisition : public DC3Module {
	DC3Attribute *Modality;
	DC3Attribute *StudyDescription;
	DC3Attribute *PerformingPhysicianName;
	DC3Attribute *StudyComponentStatusID;
public:
	DC3Module_StudyComponentAcquisition(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ResultsRelationship : public DC3Module {
public:
	DC3Module_ResultsRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ResultsIdentification : public DC3Module {
	DC3Attribute *ResultsID;
	DC3Attribute *ResultsIDIssuer;
public:
	DC3Module_ResultsIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ResultsImpression : public DC3Module {
	DC3Attribute *Impressions;
	DC3Attribute *ResultsComments;
public:
	DC3Module_ResultsImpression(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationRelationship : public DC3Module {
public:
	DC3Module_InterpretationRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationIdentification : public DC3Module {
	DC3Attribute *InterpretationID;
	DC3Attribute *InterpretationIDIssuer;
public:
	DC3Module_InterpretationIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationState : public DC3Module {
	DC3Attribute *InterpretationTypeID;
	DC3Attribute *InterpretationStatusID;
public:
	DC3Module_InterpretationState(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationRecording : public DC3Module {
	DC3Attribute *InterpretationRecordedDate;
	DC3Attribute *InterpretationRecordedTime;
	DC3Attribute *InterpretationRecorder;
	DC3Attribute *ReferenceToRecordedSound;
public:
	DC3Module_InterpretationRecording(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationTranscription : public DC3Module {
	DC3Attribute *InterpretationTranscriptionDate;
	DC3Attribute *InterpretationTranscriptionTime;
	DC3Attribute *InterpretationTranscriber;
	DC3Attribute *InterpretationText;
	DC3Attribute *InterpretationAuthor;
public:
	DC3Module_InterpretationTranscription(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_InterpretationApproval : public DC3Module {
	DC3Attribute *InterpretationDiagnosisDescription;
public:
	DC3Module_InterpretationApproval(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_Patient : public DC3Module {
	DC3Attribute *PatientName;
	DC3Attribute *PatientID;
	DC3Attribute *PatientBirthDate;
	DC3Attribute *PatientSex;
	DC3Attribute *PatientBirthTime;
	DC3Attribute *OtherPatientID;
	DC3Attribute *OtherPatientName;
	DC3Attribute *EthnicGroup;
	DC3Attribute *PatientComments;
public:
	DC3Module_Patient(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_GeneralStudy : public DC3Module {
	DC3Attribute *StudyInstanceUID;
	DC3Attribute *StudyDate;
	DC3Attribute *StudyTime;
	DC3Attribute *ReferringPhysicianName;
	DC3Attribute *StudyID;
	DC3Attribute *AccessionNumber;
	DC3Attribute *StudyDescription;
	DC3Attribute *PhysicianReadingStudy;
public:
	DC3Module_GeneralStudy(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PatientStudy : public DC3Module {
	DC3Attribute *AdmittingDiagnosisDescription;
	DC3Attribute *PatientAge;
	DC3Attribute *PatientSize;
	DC3Attribute *PatientWeight;
	DC3Attribute *Occupation;
	DC3Attribute *AdditionalPatientHistory;
public:
	DC3Module_PatientStudy(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_GeneralSeries : public DC3Module {
	DC3Attribute *Modality;
	DC3Attribute *SeriesInstanceUID;
	DC3Attribute *SeriesNumber;
	DC3Attribute *Laterality;
	DC3Attribute *SeriesDate;
	DC3Attribute *SeriesTime;
	DC3Attribute *PerformingPhysicianName;
	DC3Attribute *ProtocolName;
	DC3Attribute *SeriesDescription;
	DC3Attribute *OperatorName;
	DC3Attribute *BodyPartExamined;
	DC3Attribute *PatientPosition;
	DC3Attribute *SmallestPixelValueInSeries;
	DC3Attribute *LargestPixelValueInSeries;
public:
	DC3Module_GeneralSeries(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_FrameOfReference : public DC3Module {
	DC3Attribute *FrameOfReferenceUID;
	DC3Attribute *PositionReferenceIndicator;
public:
	DC3Module_FrameOfReference(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_GeneralEquipment : public DC3Module {
	DC3Attribute *Manufacturer;
	DC3Attribute *InstitutionName;
	DC3Attribute *InstitutionAddress;
	DC3Attribute *StationName;
	DC3Attribute *InstitutionalDepartmentName;
	DC3Attribute *ManufacturerModelName;
	DC3Attribute *DeviceSerialNumber;
	DC3Attribute *SoftwareVersion;
	DC3Attribute *SpatialResolution;
	DC3Attribute *DateOfLastCalibration;
	DC3Attribute *TimeOfLastCalibration;
	DC3Attribute *PixelPaddingValue;
public:
	DC3Module_GeneralEquipment(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_GeneralImage : public DC3Module {
	DC3Attribute *ImageNumber;
	DC3Attribute *PatientOrientation;
	DC3Attribute *ImageDate;
	DC3Attribute *ImageTime;
	DC3Attribute *ImageType;
	DC3Attribute *AcquisitionNumber;
	DC3Attribute *AcquisitionDate;
	DC3Attribute *AcquisitionTime;
	DC3Attribute *DerivationDescription;
	DC3Attribute *ImagesInAcquisition;
	DC3Attribute *ImageComments;
public:
	DC3Module_GeneralImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImagePlane : public DC3Module {
	DC3Attribute *PixelSpacing;
	DC3Attribute *ImageOrientationPatient;
	DC3Attribute *ImagePositionPatient;
	DC3Attribute *SliceThickness;
	DC3Attribute *SliceLocation;
public:
	DC3Module_ImagePlane(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImagePixel : public DC3Module {
	DC3Attribute *SamplesPerPixel;
	DC3Attribute *PhotometricInterpretation;
	DC3Attribute *Rows;
	DC3Attribute *Columns;
	DC3Attribute *BitsAllocated;
	DC3Attribute *BitsStored;
	DC3Attribute *HighBit;
	DC3Attribute *PixelRepresentation;
	DC3Attribute *PixelData;
	DC3Attribute *PlanarConfiguration;
	DC3Attribute *PixelAspectRatio;
	DC3Attribute *SmallestImagePixelValue;
	DC3Attribute *LargestImagePixelValue;
	DC3Attribute *RedPaletteColorLookupTableDescriptor;
	DC3Attribute *GreenPaletteColorLookupTableDescriptor;
	DC3Attribute *BluePaletteColorLookupTableDescriptor;
	DC3Attribute *RedPaletteColorLookupTableData;
	DC3Attribute *GreenPaletteColorLookupTableData;
	DC3Attribute *BluePaletteColorLookupTableData;
public:
	DC3Module_ImagePixel(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ContrastBolus : public DC3Module {
	DC3Attribute *ContrastBolusAgent;
	DC3Attribute *ContrastBolusRoute;
	DC3Attribute *ContrastBolusVolume;
	DC3Attribute *ContrastBolusStartTime;
	DC3Attribute *ContrastBolusStopTime;
	DC3Attribute *ContrastBolusTotalDose;
public:
	DC3Module_ContrastBolus(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_Cine : public DC3Module {
	DC3Attribute *FrameTime;
	DC3Attribute *FrameTimeVector;
	DC3Attribute *StartTrim;
	DC3Attribute *StopTrim;
	DC3Attribute *RecommendedDisplayFrameRate;
	DC3Attribute *CineRate;
	DC3Attribute *FrameDelay;
	DC3Attribute *EffectiveSeriesDuration;
	DC3Attribute *ActualFrameDuration;
public:
	DC3Module_Cine(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_MultiFrame : public DC3Module {
	DC3Attribute *NumberOfFrames;
	DC3Attribute *FrameIncrementPointer;
public:
	DC3Module_MultiFrame(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PatientSummary : public DC3Module {
	DC3Attribute *PatientName;
	DC3Attribute *PatientID;
public:
	DC3Module_PatientSummary(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_StudyContent : public DC3Module {
	DC3Attribute *StudyID;
	DC3Attribute *StudyInstanceUID;
public:
	DC3Module_StudyContent(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_CRSeries : public DC3Module {
	DC3Attribute *BodyPartExamined;
	DC3Attribute *ViewPosition;
	DC3Attribute *FilterType;
	DC3Attribute *CollimatorGridName;
	DC3Attribute *FocalSpot;
	DC3Attribute *PlateType;
	DC3Attribute *PhosphorType;
public:
	DC3Module_CRSeries(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_CRImage : public DC3Module {
	DC3Attribute *KVP;
	DC3Attribute *PlateID;
	DC3Attribute *DistanceSourceToDetector;
	DC3Attribute *DistanceSourceToPatient;
	DC3Attribute *ExposureTime;
	DC3Attribute *XrayTubeCurrent;
	DC3Attribute *Exposure;
	DC3Attribute *GeneratorPower;
	DC3Attribute *AcquisitionDeviceProcessingDescription;
	DC3Attribute *AcquisitionDeviceProcessingCode;
	DC3Attribute *CassetteOrientation;
	DC3Attribute *CassetteSize;
	DC3Attribute *ExposuresOnPlate;
	DC3Attribute *RelativeXrayExposure;
	DC3Attribute *Sensitivity;
public:
	DC3Module_CRImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_CTImage : public DC3Module {
	DC3Attribute *ImageType;
	DC3Attribute *SamplesPerPixel;
	DC3Attribute *PhotometricInterpretation;
	DC3Attribute *BitsAllocated;
	DC3Attribute *BitsStored;
	DC3Attribute *HighBit;
	DC3Attribute *RescaleIntercept;
	DC3Attribute *RescaleSlope;
	DC3Attribute *KVP;
	DC3Attribute *AcquisitionNumber;
	DC3Attribute *ScanOptions;
	DC3Attribute *DataCollectionDiameter;
	DC3Attribute *DistanceSourceToDetector;
	DC3Attribute *DistanceSourceToPatient;
	DC3Attribute *GantryDetectorTilt;
	DC3Attribute *TableHeight;
	DC3Attribute *RotationDirection;
	DC3Attribute *ExposureTime;
	DC3Attribute *XrayTubeCurrent;
	DC3Attribute *Exposure;
	DC3Attribute *FilterType;
	DC3Attribute *GeneratorPower;
	DC3Attribute *FocalSpot;
	DC3Attribute *ConvolutionKernel;
public:
	DC3Module_CTImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_MRImage : public DC3Module {
	DC3Attribute *ImageType;
	DC3Attribute *SamplesPerPixel;
	DC3Attribute *PhotometricInterpretation;
	DC3Attribute *BitsAllocated;
	DC3Attribute *ScanningSequence;
	DC3Attribute *SequenceVariant;
	DC3Attribute *ScanOptions;
	DC3Attribute *MRAcquisitionType;
	DC3Attribute *RepetitionTime;
	DC3Attribute *EchoTime;
	DC3Attribute *EchoTrainLength;
	DC3Attribute *InversionTime;
	DC3Attribute *TriggerTime;
	DC3Attribute *SequenceName;
	DC3Attribute *AngioFlag;
	DC3Attribute *NumberOfAverages;
	DC3Attribute *ImagingFrequency;
	DC3Attribute *ImagedNucleus;
	DC3Attribute *EchoNumber;
	DC3Attribute *MagneticFieldStrength;
	DC3Attribute *SpacingBetweenSlices;
	DC3Attribute *NumberOfPhaseEncodingSteps;
	DC3Attribute *PercentSampling;
	DC3Attribute *PercentPhaseFieldOfView;
	DC3Attribute *PixelBandwidth;
	DC3Attribute *NominalInterval;
	DC3Attribute *BeatRejectionFlag;
	DC3Attribute *LowRRValue;
	DC3Attribute *HighRRValue;
	DC3Attribute *IntervalsAcquired;
	DC3Attribute *IntervalsRejected;
	DC3Attribute *PVCRejection;
	DC3Attribute *SkipBeats;
	DC3Attribute *HeartRate;
	DC3Attribute *CardiacNumberOfImages;
	DC3Attribute *TriggerWindow;
	DC3Attribute *ReconstructionDiameter;
	DC3Attribute *ReceivingCoil;
	DC3Attribute *TransmittingCoil;
	DC3Attribute *AcquisitionMatrix;
	DC3Attribute *PhaseEncodingDirection;
	DC3Attribute *FlipAngle;
	DC3Attribute *SAR;
	DC3Attribute *VariableFlipAngleFlag;
	DC3Attribute *dBdt;
	DC3Attribute *TemporalPositionIdentifier;
	DC3Attribute *NumberOfTemporalPositions;
	DC3Attribute *TemporalResolution;
public:
	DC3Module_MRImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_NMSeries : public DC3Module {
	DC3Attribute *Radionuclide;
	DC3Attribute *NuclearMedicineSeriesType;
	DC3Attribute *ScanVelocity;
	DC3Attribute *WholeBodyTechnique;
	DC3Attribute *ScanLength;
	DC3Attribute *Radiopharmaceutical;
	DC3Attribute *EnergyWindowCenterline;
	DC3Attribute *EnergyWindowTotalWidth;
	DC3Attribute *InterventionalDrugName;
	DC3Attribute *InterventionalDrugStartTime;
	DC3Attribute *EffectiveSeriesDuration;
	DC3Attribute *SyringeCounts;
	DC3Attribute *TriggerSourceOrType;
	DC3Attribute *RadionuclideRoute;
	DC3Attribute *RadionuclideVolume;
	DC3Attribute *RadionuclideStartTime;
	DC3Attribute *RadionuclideStopTime;
	DC3Attribute *RadionuclideTotalDose;
	DC3Attribute *GantryDetectorTilt;
	DC3Attribute *IsotopeNumber;
public:
	DC3Module_NMSeries(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_NMEquipment : public DC3Module {
	DC3Attribute *CenterOfRotationOffset;
	DC3Attribute *FieldOfViewShape;
	DC3Attribute *FieldOfViewDimension;
	DC3Attribute *CollimatorGridName;
	DC3Attribute *CollimatorType;
	DC3Attribute *FocalDistance;
	DC3Attribute *XFocusCenter;
	DC3Attribute *YFocusCenter;
public:
	DC3Module_NMEquipment(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_NMImage : public DC3Module {
	DC3Attribute *FrameIncrementPointer;
	DC3Attribute *ZoomFactor;
	DC3Attribute *CountsAccumulated;
	DC3Attribute *AcquisitionTerminationCondition;
	DC3Attribute *ReconstructionDiameter;
	DC3Attribute *DistanceSourceToDetector;
	DC3Attribute *TableHeight;
	DC3Attribute *TableTraverse;
	DC3Attribute *AngularPosition;
	DC3Attribute *RadialPosition;
	DC3Attribute *ConvolutionKernel;
	DC3Attribute *ActualFrameDuration;
	DC3Attribute *CountRate;
	DC3Attribute *PreprocessingFunction;
	DC3Attribute *PostprocessingFunction;
	DC3Attribute *PhaseNumber;
	DC3Attribute *IntervalNumber;
	DC3Attribute *TimeSlotNumber;
	DC3Attribute *AngleNumber;
	DC3Attribute *ZoomCenter;
	DC3Attribute *CorrectedImage;
public:
	DC3Module_NMImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_NMSPECTAcquisitionImage : public DC3Module {
	DC3Attribute *FrameIncrementPointer;
	DC3Attribute *AngularStep;
	DC3Attribute *ZoomFactor;
	DC3Attribute *ScanArc;
	DC3Attribute *ReconstructionDiameter;
	DC3Attribute *DistanceSourceToDetector;
	DC3Attribute *TableHeight;
	DC3Attribute *TableTraverse;
	DC3Attribute *RotationDirection;
	DC3Attribute *AngularPosition;
	DC3Attribute *RadialPosition;
	DC3Attribute *RotationOffset;
	DC3Attribute *AngleNumber;
	DC3Attribute *ZoomCenter;
public:
	DC3Module_NMSPECTAcquisitionImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_NMMultiGatedAcquisitionImage : public DC3Module {
	DC3Attribute *FrameIncrementPointer;
	DC3Attribute *TriggerSourceOrType;
	DC3Attribute *FrameTime;
	DC3Attribute *TriggerTime;
	DC3Attribute *NominalInterval;
	DC3Attribute *FramingType;
	DC3Attribute *BeatRejectionFlag;
	DC3Attribute *LowRRValue;
	DC3Attribute *HighRRValue;
	DC3Attribute *IntervalsAcquired;
	DC3Attribute *IntervalsRejected;
	DC3Attribute *PVCRejection;
	DC3Attribute *SkipBeats;
	DC3Attribute *HeartRate;
	DC3Attribute *CardiacNumberOfImages;
public:
	DC3Module_NMMultiGatedAcquisitionImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_USFrameOfReference : public DC3Module {
	DC3Attribute *RegionLocationMinX0;
	DC3Attribute *RegionLocationMinY0;
	DC3Attribute *RegionLocationMaxX1;
	DC3Attribute *RegionLocationMaxY1;
	DC3Attribute *PhysicalUnitsXDirection;
	DC3Attribute *PhysicalUnitsYDirection;
	DC3Attribute *PhysicalDeltaX;
	DC3Attribute *PhysicalDeltaY;
	DC3Attribute *ReferencePixelX0;
	DC3Attribute *ReferencePixelY0;
	DC3Attribute *ReferencePixelPhysicalValueX;
	DC3Attribute *ReferencePixelPhysicalValueY;
public:
	DC3Module_USFrameOfReference(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_USRegionCalibration : public DC3Module {
public:
	DC3Module_USRegionCalibration(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_USImage : public DC3Module {
	DC3Attribute *PhotometricInterpretation;
	DC3Attribute *PixelRepresentation;
	DC3Attribute *FrameIncrementPointer;
	DC3Attribute *ImageType;
	DC3Attribute *NumberOfStages;
	DC3Attribute *NumberOfViewsInStage;
	DC3Attribute *StageName;
	DC3Attribute *StageNumber;
	DC3Attribute *ViewNumber;
	DC3Attribute *NumberOfEventTimers;
	DC3Attribute *EventElapsedTime;
	DC3Attribute *EventTimerName;
	DC3Attribute *TransducerPosition;
	DC3Attribute *TransducerOrientation;
	DC3Attribute *AnatomicStructure;
	DC3Attribute *TriggerTime;
	DC3Attribute *NominalInterval;
	DC3Attribute *BeatRejectionFlag;
	DC3Attribute *LowRRValue;
	DC3Attribute *HighRRValue;
	DC3Attribute *HeartRate;
	DC3Attribute *OutputPower;
	DC3Attribute *TransducerData;
	DC3Attribute *TransducerType;
	DC3Attribute *FocusDepth;
	DC3Attribute *PreprocessingFunction;
	DC3Attribute *MechanicalIndex;
	DC3Attribute *ThermalIndex;
	DC3Attribute *CranialThermalIndex;
	DC3Attribute *SoftTissueThermalIndex;
	DC3Attribute *SoftTissueFocusThermalIndex;
	DC3Attribute *SoftTissueSurfaceThermalIndex;
	DC3Attribute *DepthOfScanField;
	DC3Attribute *ImageTransformationMatrix;
	DC3Attribute *ImageTranslationVector;
public:
	DC3Module_USImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_SCImageEquipment : public DC3Module {
	DC3Attribute *ConversionType;
	DC3Attribute *Modality;
	DC3Attribute *SecondaryCaptureDeviceID;
	DC3Attribute *SecondaryCaptureDeviceManufacturer;
	DC3Attribute *SecondaryCaptureDeviceManufacturerModelName;
	DC3Attribute *SecondaryCaptureDeviceSoftwareVersion;
	DC3Attribute *VideoImageFormatAcquired;
	DC3Attribute *DigitalImageFormatAcquired;
public:
	DC3Module_SCImageEquipment(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_SCImage : public DC3Module {
	DC3Attribute *DateOfSecondaryCapture;
	DC3Attribute *TimeOfSecondaryCapture;
public:
	DC3Module_SCImage(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_OverlayIdentification : public DC3Module {
	DC3Attribute *OverlayNumber;
	DC3Attribute *OverlayDate;
	DC3Attribute *OverlayTime;
public:
	DC3Module_OverlayIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_OverlayPlane : public DC3Module {
	DC3Attribute *OverlayRows;
	DC3Attribute *OverlayColumns;
	DC3Attribute *OverlayType;
	DC3Attribute *OverlayOrigin;
	DC3Attribute *OverlayBitsAllocated;
	DC3Attribute *OverlayBitPosition;
	DC3Attribute *OverlayData;
	DC3Attribute *ROIArea;
	DC3Attribute *ROIMean;
	DC3Attribute *ROIStandardDeviation;
	DC3Attribute *OverlayDescriptorGray;
	DC3Attribute *OverlayDescriptorRed;
	DC3Attribute *OverlayDescriptorGreen;
	DC3Attribute *OverlayDescriptorBlue;
	DC3Attribute *OverlayGray;
	DC3Attribute *OverlayRed;
	DC3Attribute *OverlayGreen;
	DC3Attribute *OverlayBlue;
public:
	DC3Module_OverlayPlane(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_MultiFrameOverlay : public DC3Module {
	DC3Attribute *OverlayNumberOfFrames;
public:
	DC3Module_MultiFrameOverlay(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_CurveIdentification : public DC3Module {
	DC3Attribute *CurveNumber;
	DC3Attribute *CurveDate;
	DC3Attribute *CurveTime;
public:
	DC3Module_CurveIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_Curve : public DC3Module {
	DC3Attribute *CurveDimensions;
	DC3Attribute *NumberOfPoints;
	DC3Attribute *TypeOfData;
	DC3Attribute *DataValueRepresentation;
	DC3Attribute *CurveData;
	DC3Attribute *CurveDescription;
	DC3Attribute *AxisUnits;
	DC3Attribute *AxisLabels;
	DC3Attribute *MinimumCoordinateValue;
	DC3Attribute *MaximumCoordinateValue;
	DC3Attribute *CurveRange;
	DC3Attribute *CurveDataDescriptor;
	DC3Attribute *CoordinateStartValue;
	DC3Attribute *CoordinateStepValue;
public:
	DC3Module_Curve(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_Audio : public DC3Module {
	DC3Attribute *AudioType;
	DC3Attribute *AudioSampleFormat;
	DC3Attribute *NumberOfChannels;
	DC3Attribute *NumberOfSamples;
	DC3Attribute *SampleRate;
	DC3Attribute *TotalTime;
	DC3Attribute *AudioSampleData;
	DC3Attribute *AudioComments;
public:
	DC3Module_Audio(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ModalityLUT : public DC3Module {
	DC3Attribute *RescaleIntercept;
	DC3Attribute *RescaleSlope;
	DC3Attribute *RescaleType;
public:
	DC3Module_ModalityLUT(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_VOILUT : public DC3Module {
	DC3Attribute *WindowCenter;
	DC3Attribute *WindowWidth;
	DC3Attribute *WindowCenterWidthExplanation;
public:
	DC3Module_VOILUT(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_LUTIdentification : public DC3Module {
	DC3Attribute *LUTNumber;
public:
	DC3Module_LUTIdentification(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_SOPCommon : public DC3Module {
	DC3Attribute *SOPClassUID;
	DC3Attribute *SOPInstanceUID;
	DC3Attribute *SpecificCharacterSet;
	DC3Attribute *InstanceCreationDate;
	DC3Attribute *InstanceCreationTime;
	DC3Attribute *InstanceCreatorUID;
public:
	DC3Module_SOPCommon(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_BasicFilmSessionPresentation : public DC3Module {
	DC3Attribute *NumberOfCopies;
	DC3Attribute *PrintPriority;
	DC3Attribute *MediumType;
	DC3Attribute *FilmDestination;
	DC3Attribute *FilmSessionLabel;
	DC3Attribute *MemoryAllocation;
public:
	DC3Module_BasicFilmSessionPresentation(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_BasicFilmSessionRelationship : public DC3Module {
public:
	DC3Module_BasicFilmSessionRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_BasicFilmBoxPresentation : public DC3Module {
	DC3Attribute *ImageDisplayFormat;
	DC3Attribute *AnnotationDisplayFormatID;
	DC3Attribute *FilmOrientation;
	DC3Attribute *FilmSizeID;
	DC3Attribute *MagnificationType;
	DC3Attribute *SmoothingType;
	DC3Attribute *BorderDensity;
	DC3Attribute *EmptyImageDensity;
	DC3Attribute *MinDensity;
	DC3Attribute *MaxDensity;
	DC3Attribute *Trim;
	DC3Attribute *ConfigurationInformation;
public:
	DC3Module_BasicFilmBoxPresentation(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_BasicFilmBoxRelationship : public DC3Module {
public:
	DC3Module_BasicFilmBoxRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImageBoxPixelPresentation : public DC3Module {
	DC3Attribute *ImagePosition;
	DC3Attribute *Polarity;
	DC3Attribute *MagnificationType;
	DC3Attribute *SmoothingType;
	DC3Attribute *RequestedImageSize;
public:
	DC3Module_ImageBoxPixelPresentation(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImageBoxRelationship : public DC3Module {
public:
	DC3Module_ImageBoxRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_BasicAnnotationPresentation : public DC3Module {
	DC3Attribute *AnnotationPosition;
	DC3Attribute *TextString;
public:
	DC3Module_BasicAnnotationPresentation(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_PrintJob : public DC3Module {
	DC3Attribute *ExecutionStatus;
	DC3Attribute *ExecutionStatusInfo;
	DC3Attribute *CreationDate;
	DC3Attribute *CreationTime;
	DC3Attribute *PrintPriority;
	DC3Attribute *PrinterName;
	DC3Attribute *Originator;
public:
	DC3Module_PrintJob(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_Printer : public DC3Module {
	DC3Attribute *PrinterStatus;
	DC3Attribute *PrinterStatusInfo;
	DC3Attribute *PrinterName;
	DC3Attribute *Manufacturer;
	DC3Attribute *ManufacturerModelName;
	DC3Attribute *DeviceSerialNumber;
	DC3Attribute *SoftwareVersion;
	DC3Attribute *DateOfLastCalibration;
	DC3Attribute *TimeOfLastCalibration;
public:
	DC3Module_Printer(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImageOverlayBoxPresentation : public DC3Module {
	DC3Attribute *OverlayMagnificationType;
	DC3Attribute *OverlaySmoothingType;
	DC3Attribute *OverlayForegroundDensity;
	DC3Attribute *OverlayMode;
	DC3Attribute *ThresholdDensity;
public:
	DC3Module_ImageOverlayBoxPresentation(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};

class DC3Module_ImageOverlayBoxRelationship : public DC3Module {
public:
	DC3Module_ImageOverlayBoxRelationship(DC3ListofAttributes *list);
	char *Identify(void);
	void  Put(ostream& stream);
};


#endif /* _DC3tmodule_HEADER_ */





/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
  ! Copyright (C) 1998 Dtack Inc. All Rights Reserved
  ! To use this file, you must have signed a license agreement with Dtack Inc.
  ! Under no circumstances may you redistribute this file.
  ! This software is provided AS IS with no warranty expressed or implied.
  ! Dtack Inc. accepts no liability for use or misuse of this file.
  ! http://www.dtack.com  dtack@dtack.com  telephone +360.417.6700
  ! Dtack Inc, P.O. Box 3061, Port Angeles, WA USA 98362
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
